<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Project Atomic</title>
  <subtitle>Tag: O Virt</subtitle>
  <id>http://www.projectatomic.io/blog/</id>
  <link href="http://www.projectatomic.io/blog/"/>
  <link href="http://www.projectatomic.io/blog/tag/ovirt.xml" rel="self"/>
  <updated>2019-11-21T00:00:00+00:00</updated>
  <author>
    <name>Project Atomic. Sponsored by Red Hat, Inc.</name>
  </author>
  <entry>
    <title>Running oVirt's Guest Agent on Atomic as a Privileged Container</title>
    <link rel="alternate" href="http://www.projectatomic.io/blog/2015/01/running-ovirt-guest-agent-as-privileged-container/"/>
    <id>http://www.projectatomic.io/blog/2015/01/running-ovirt-guest-agent-as-privileged-container/</id>
    <published>2015-01-30T18:00:00+00:00</published>
    <updated>2021-10-07T14:03:16+00:00</updated>
    <author>
      <name>Jason Brooks</name>
    </author>
    <content type="html">&lt;p&gt;Atomic hosts are meant to be as slim as possible, with a bare minimum of applications and services built-in, and everything else running in containers. However, what counts as your bare minimum is sure to differ from mine, particularly when we&amp;rsquo;re running our Atomic hosts in different environments.&lt;/p&gt;

&lt;p&gt;For instance, I&amp;rsquo;m frequently testing and using Atomic hosts on my &lt;a href="http://www.ovirt.org"&gt;oVirt&lt;/a&gt; installation, where it&amp;rsquo;s handy to have oVirt&amp;rsquo;s &lt;a href="http://www.ovirt.org/Ovirt_guest_agent"&gt;guest agent&lt;/a&gt; running, which provides handy information about what&amp;rsquo;s going on inside of an oVirt-hosted VM. If you aren&amp;rsquo;t using oVirt, though, there&amp;rsquo;s no reason to carry this package around in what&amp;rsquo;s supposed to be a svelte image.&lt;/p&gt;

&lt;p&gt;I could &lt;a href="http://www.projectatomic.io/blog/2014/11/build-your-own-atomic-updates/"&gt;build my own&lt;/a&gt; Atomic host, and include the &lt;code&gt;ovirt-guest-agent-common&lt;/code&gt; package, but I&amp;rsquo;d rather stick with upstream. Containerization is the solution for running extra software on Atomic, but since the guest agent needs to see and interact with the host itself, we need an Containers Unbound sort of approach. Fortunately, Dan Walsh has blogged about this very issue, in a post about the &lt;a href="http://developerblog.redhat.com/2014/11/06/introducing-a-super-privileged-container-concept/"&gt;Super Privileged Container&lt;/a&gt; concept:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;q&gt;I define an SPC as a container that runs with security turned off (&amp;ndash;privileged) and turns off one or more of the namespaces or &amp;lsquo;volume mounts in&amp;rsquo; parts of the host OS into the container. This means it is exposed to more of the Host OS.&lt;/q&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;Building the guest agent container&lt;/h3&gt;

&lt;p&gt;I started with a Dockerfile defining my ovirt-guest-agent container:&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;FROM centos:centos7
MAINTAINER Jason Brooks &amp;lt;jbrooks@redhat.com&amp;gt;

RUN yum -y update; \
yum -y install epel-release; \
yum -y install ovirt-guest-agent-common; \
yum clean all

CMD /usr/bin/python /usr/share/ovirt-guest-agent/ovirt-guest-agent.py
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For the &lt;code&gt;CMD&lt;/code&gt; line, I took the command that you&amp;rsquo;ll find running on a VM with guest agent active. I also tested with a longer &lt;code&gt;CMD&lt;/code&gt;, in which I strung together all of the commands you find in the systemd service file for the guest agent, including the PreExec commands:&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;CMD /sbin/modprobe virtio_console; \
/bin/touch /run/ovirt-guest-agent.pid; \
/bin/chown ovirtagent:ovirtagent /run/ovirt-guest-agent.pid; \
/usr/bin/python /usr/share/ovirt-guest-agent/ovirt-guest-agent.py
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Both &lt;code&gt;CMD&lt;/code&gt; lines seemed to work in my tests, but this could stand some more testing.&lt;/p&gt;

&lt;h3&gt;Running the guest agent container&lt;/h3&gt;

&lt;p&gt;Dan&amp;rsquo;s post includes a variety of examples of host resources that a super privileged container may need to access, and the &lt;code&gt;docker run&lt;/code&gt; arguments required to enable them. After experimenting with different run commands, the simplest set of arguments required appeared to be:&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;sudo docker run --privileged -dt --name ovirt-agent --net=host \
-v /dev/virtio-ports/com.redhat.rhevm.vdsm:/dev/virtio-ports/com.redhat.rhevm.vdsm \
-v /dev/virtio-ports/com.redhat.spice.0:/dev/virtio-ports/com.redhat.spice.0 \
-v /dev/virtio-ports/org.qemu.guest_agent.0:/dev/virtio-ports/org.qemu.guest_agent.0 \
$USER/ovirt-guest
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Setting the container to auto-start&lt;/h3&gt;

&lt;p&gt;I wanted the ovirt-agent container to start up following a reboot, so I followed the advice of the &lt;a href="#"&gt;docker docs&lt;/a&gt; and made myself a systemd service file to handle the job:&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;[Unit]
Description=ovirt guest agent container
Author=Me
After=docker.service

[Service]
Restart=always
ExecStart=/usr/bin/docker start -a ovirt-agent
ExecStop=/usr/bin/docker stop -t 2 ovirt-agent

[Install]
WantedBy=multi-user.target
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I saved this file at &lt;code&gt;/etc/systemd/system/ovirt-agent.service&lt;/code&gt; and ran &lt;code&gt;sudo systemctl enable ovirt-agent&lt;/code&gt; to direct systemd to start it up following a reboot.&lt;/p&gt;

&lt;h3&gt;Till next time&lt;/h3&gt;

&lt;p&gt;If you have questions (or better yet, suggestions) regarding this post, Iâ€™d love to hear them. Ping me at jbrooks in #atomic on freenode irc or &lt;a href="https://twitter.com/jasonbrooks"&gt;@jasonbrooks&lt;/a&gt; on Twitter, or send a message to the &lt;a href="https://lists.projectatomic.io/mailman/listinfo/atomic-devel"&gt;Project Atomic mailing list&lt;/a&gt;. Also, be sure to check out the &lt;a href="http://ask.projectatomic.io/en/questions/"&gt;Project Atomic Q&amp;amp;A site&lt;/a&gt;.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Containers Vs. Virtual Machines is a Fake Conflict</title>
    <link rel="alternate" href="http://www.projectatomic.io/blog/2014/06/containers-vs-virtual-machines-is-a-fake-conflict/"/>
    <id>http://www.projectatomic.io/blog/2014/06/containers-vs-virtual-machines-is-a-fake-conflict/</id>
    <published>2014-06-13T15:00:00+00:00</published>
    <updated>2021-10-07T14:03:16+00:00</updated>
    <author>
      <name>Brian Proffitt</name>
    </author>
    <content type="html">&lt;p&gt;With &lt;a href="http://www.projectatomic.io/blog/2014/06/new-fedora-based-atomic-image-available-with-docker-1-0/"&gt;DockerCon wrapping up earlier this week&lt;/a&gt;, it&amp;rsquo;s little surprise that containers are getting a lot of attention in the Web-o-sphere these days.&lt;/p&gt;

&lt;p&gt;One of the better articles I have seen in a while that covers container technology is &lt;a href="http://www.linuxjournal.com/content/linux-containers-and-future-cloud"&gt;Rami Rosen&amp;rsquo;s piece on Linux Journal&lt;/a&gt;. This is a great primer that gets into the guts of containers, explaining not only how they work but why they are beneficial: &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;q&gt;Due to the fact that containers are more lightweight than VMs, you can achieve higher densities with containers than with VMs on the same host (practically speaking, you can deploy more instances of containers than of VMs on the same host)&amp;hellip; Another advantage of containers over VMs is that starting and shutting down a container is much faster than starting and shutting down a VM.&lt;/q&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;It is easy to see the focus on containers as some sort of threat to virtual machines. Application-centric containers, after all sound like a much easier technology to manage than a whole VM. In some respects, that&amp;rsquo;s some truth to that. Developers, after all, would love nothing more than not having to deal with OS updates changing libraries out from under their applications. &lt;/p&gt;

&lt;h3&gt;The Place For Virtualization&lt;/h3&gt;

&lt;p&gt;But don&amp;rsquo;t count VMs out yet; &lt;a href="http://www.projectatomic.io/blog/2014/05/why-the-operating-system-will-never-die/"&gt;just like operating systems&lt;/a&gt;, VMs will still have a place in IT. Running Project Atomic hosts can be done on bare metal to be sure, but running the Atomic hosts as VMs that can be orchestrated and managed on the virtualization level can give admins a huge amount of flexibility.&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s not just applications that can benefit from containers, mind you, cloud infrastructure itself can be transformed by containers. There is a real push to package OpenStack services as containers, either on bare metal or atop multi-service KVM machines. Ideally, this would reduce the complexity found in OpenStack usage and packaging. It&amp;rsquo;s pretty cool to imagine some of the many scenarios: Atomic Host virtual machines running containers with &lt;a href="http://openstack.redhat.com/"&gt;RDO OpenStack&lt;/a&gt; services to deploy your applications in true cloud fashion. Manage those Host VMs with a data center manager like &lt;a href="http://www.ovirt.org"&gt;oVirt&lt;/a&gt;, and you&amp;rsquo;ve got superior flexibility for your IT configuration.&lt;/p&gt;

&lt;p&gt;The day is coming, sooner than you can imagine.&lt;/p&gt;
</content>
  </entry>
</feed>

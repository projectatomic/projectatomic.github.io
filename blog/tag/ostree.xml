<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Project Atomic</title>
  <subtitle>Tag: Ostree</subtitle>
  <id>http://www.projectatomic.io/blog/</id>
  <link href="http://www.projectatomic.io/blog/"/>
  <link href="http://www.projectatomic.io/blog/tag/ostree.xml" rel="self"/>
  <updated>2019-11-21T00:00:00+00:00</updated>
  <author>
    <name>Project Atomic. Sponsored by Red Hat, Inc.</name>
  </author>
  <entry>
    <title>Latest rpm-ostree features</title>
    <link rel="alternate" href="http://www.projectatomic.io/blog/2018/03/new-rpm-ostree-features/"/>
    <id>http://www.projectatomic.io/blog/2018/03/new-rpm-ostree-features/</id>
    <published>2018-03-20T17:00:00+00:00</published>
    <updated>2021-10-07T14:03:16+00:00</updated>
    <author>
      <name>Jonathan Lebon</name>
    </author>
    <content type="html">&lt;p&gt;&lt;a href="https://rpm-ostree.readthedocs.org/"&gt;rpm-ostree&lt;/a&gt; is the
hybrid image/package system that provides transactional
upgrades on Atomic Host.&lt;/p&gt;

&lt;p&gt;This blog post is a high-level summary of the recent
features that were added in the last few releases.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;h3&gt;New rojig delivery mechanism&lt;/h3&gt;

&lt;p&gt;By far the most fundamental shift that has occurred in the
latest releases is support for a different way of delivering
OSTrees to client machines. Dubbed &lt;q&gt;rojig&lt;/q&gt;, the idea is that
rather than clients downloading commits from OSTree remotes,
they instead re-assemble the exact same commit using RPMs
from yum repos. How? When OSTree commits are created on the
server, most of its files can be traced back to specific
RPMs. The work of figuring out which files come from which
RPM is done on the compose server. Files which do not come
from an RPM (e.g. the initramfs) are dumped in a special
&lt;q&gt;rojig RPM&lt;/q&gt;. Using this rojig RPM and all other constituent
RPMs, which are in essence fancy archives, the client is
capable of reproducing the bit-for-bit matching OSTree
commit.&lt;/p&gt;

&lt;p&gt;This allows content providers to only worry about delivering
RPMs, rather than yet another format. It opens the doors to
the many established tools and services that exist for
organizing and distributing RPMs.&lt;/p&gt;

&lt;p&gt;You can try this out today using the instructions in
&lt;a href="https://pagure.io/fedora-atomic-host-continuous/"&gt;FAHC&lt;/a&gt;:&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ rpm-ostree status
State: idle; auto updates disabled
Deployments:
● ostree://fedora-atomic:fedora/27/x86_64/atomic-host
                   Version: 27.100 (2018-03-13 17:19:44)
                    Commit: 326f62b93a5cc836c97d31e73a71b6b6b6955c0f225f7651b52a693718e6aa91
              GPGSignature: Valid signature by 860E19B0AFA800A1751881A6F55E7430F5282EE4
$ cat &amp;gt;/etc/yum.repos.d/fahc.repo &amp;lt;&amp;lt;EOF
[fahc]
baseurl=https://ci.centos.org/artifacts/sig-atomic/fahc/jigdo
gpgcheck=0
EOF
$ rpm-ostree rebase --experimental rojig://fahc:fedora-atomic-host
...
Will download: 463 packages (349.5 MB)
  Downloading from updates: [=============] 100%
  Downloading from fedora: [=============] 100%
  Downloading from fahc: [=============] 100%
Importing (463/463) [=============] 100%
...
$ rpm-ostree status -v
State: idle; auto updates disabled
Deployments:
  fahc:fedora-atomic-host-27.406-1.fc27.x86_64
                   Version: 27.406 (2018-03-19 19:55:50)
                    Commit: 6495a62314ea2158240cba6a2cbb687bb6965a38d1c724ebdfaa63a13bf9ef73
                 StateRoot: fedora-atomic

● ostree://fedora-atomic:fedora/27/x86_64/atomic-host
                   Version: 27.100 (2018-03-13 17:19:44)
                    Commit: 326f62b93a5cc836c97d31e73a71b6b6b6955c0f225f7651b52a693718e6aa91
                 StateRoot: fedora-atomic
              GPGSignature: 1 signature
                            Signature made Tue 13 Mar 2018 05:19:53 PM UTC using RSA key ID F55E7430F5282EE4
                            Good signature from "Fedora 27 &amp;lt;fedora-27@fedoraproject.org&amp;gt;"
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;At no point in the above did we reach out to the
&lt;code&gt;fedora-atomic&lt;/code&gt; remote for data. Yet, we match the exact
same checksum:&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ ostree remote summary fahc | grep -A2 fahc/27/x86_64/buildmaster
* fahc/27/x86_64/buildmaster
    Latest Commit (20.7 kB):
      6495a62314ea2158240cba6a2cbb687bb6965a38d1c724ebdfaa63a13bf9ef73
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is still a work in progress, though much of the
implementation has already been done. We&amp;rsquo;re hoping to drive
this as an experimental option in a future release of
Fedora.&lt;/p&gt;

&lt;p&gt;Upstream issue: &lt;a href="https://github.com/projectatomic/rpm-ostree/issues/1081"&gt;https://github.com/projectatomic/rpm-ostree/issues/1081&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;Automatic updates&lt;/h3&gt;

&lt;p&gt;Another major effort currently underway is a push for adding
support for automatic updates. As of the latest release,
rpm-ostree now supports a new &lt;code&gt;AutomaticUpdatePolicy&lt;/code&gt;
configuration option with only two possible values: &lt;code&gt;off&lt;/code&gt;
and &lt;code&gt;check&lt;/code&gt;. In &lt;code&gt;check&lt;/code&gt; mode, rpm-ostree will routinely
check the remote for updates and display any pending updates
in the output of &lt;code&gt;status&lt;/code&gt;:&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ rpm-ostree status -v
State: idle; auto updates enabled (check; last run 56m ago)
Deployments:
● ostree://fedora:fedora/27/x86_64/workstation
                   Version: 27.94 (2018-03-16 16:33:28)
                    Commit: dc9d19682ca2414d5a76a9765a772d5f4d8f0d9768579ee434d742555168b40c
                 StateRoot: fedora
              GPGSignature: 1 signature
                            Signature made Fri 16 Mar 2018 12:33:36 PM EDT using RSA key ID F55E7430F5282EE4
                            Good signature from "Fedora 27 &amp;lt;fedora-27@fedoraproject.org&amp;gt;"

Available update:
        Version: 27.95 (2018-03-19 04:29:52)
         Commit: 6a99b39d701a243ec9668efe7511879df4697087869e913ec9f0a4d04fdffcb3
   GPGSignature: 1 signature
                 Signature made Mon 19 Mar 2018 12:30:00 AM EDT using RSA key ID F55E7430F5282EE4
                 Good signature from "Fedora 27 &amp;lt;fedora-27@fedoraproject.org&amp;gt;"
  SecAdvisories: FEDORA-2018-a068ade416  Critical   firefox-59.0.1-1.fc27.x86_64
       Upgraded: firefox 59.0-4.fc27 -&amp;gt; 59.0.1-1.fc27
                 osinfo-db 20170813-1.fc27 -&amp;gt; 20180311-1.fc27
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As shown in the output above, it also includes open security
advisories and their severities.&lt;/p&gt;

&lt;p&gt;This is only the start. The goal is to support fully
automated updates, including automatic reboots as well as a
&lt;q&gt;softer&lt;/q&gt; pending mode where new deployments are created, but
reboots are initiated manually.&lt;/p&gt;

&lt;p&gt;Upstream issue: &lt;a href="https://github.com/projectatomic/rpm-ostree/issues/247"&gt;https://github.com/projectatomic/rpm-ostree/issues/247&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;Overrides no longer experimental&lt;/h3&gt;

&lt;p&gt;We have now straightened out the &lt;code&gt;override&lt;/code&gt; commands enough
that we feel confident declaring it stable. For example, we
now support doing &lt;code&gt;override replace&lt;/code&gt; to replace the kernel
itself. As a result it has been moved out of &lt;code&gt;ex&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Upstream patch: &lt;a href="https://github.com/projectatomic/rpm-ostree/pull/1089"&gt;https://github.com/projectatomic/rpm-ostree/pull/1089&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;New kargs experimental feature&lt;/h3&gt;

&lt;p&gt;There is a new &lt;code&gt;kargs&lt;/code&gt; command to make it easier to modify
kernel arguments. The feature is marked experimental for
now, and thus is found under the &lt;code&gt;ex&lt;/code&gt; command. For more
information on &lt;code&gt;kargs&lt;/code&gt;, check out Peter&amp;rsquo;s blog post covering
it in details
&lt;a href="../../../2018/03/update-kernel-arguments-on-atomic-host/"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Upstream patch: &lt;a href="https://github.com/projectatomic/rpm-ostree/pull/1013"&gt;https://github.com/projectatomic/rpm-ostree/pull/1013&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;New cancel command&lt;/h3&gt;

&lt;p&gt;rpm-ostree now supports a new &lt;code&gt;cancel&lt;/code&gt; command to cancel any
ongoing transaction. This is useful for cases where you lost
the controlling TTY from which you initiated the operation.&lt;/p&gt;

&lt;p&gt;More fundamentally, this is a classic display of the power
of the background update mechanism in Atomic Host. You can
safely cancel an update at any time without affecting the
stability of your running system.&lt;/p&gt;

&lt;p&gt;Upstream patch: &lt;a href="https://github.com/projectatomic/rpm-ostree/pull/1019"&gt;https://github.com/projectatomic/rpm-ostree/pull/1019&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;LiveFS support for full filesystem update&lt;/h3&gt;

&lt;p&gt;Previously, the experimental &lt;code&gt;livefs&lt;/code&gt; command only worked
when the pending deployment had pure additions (e.g. a new
layered package). &lt;code&gt;livefs&lt;/code&gt; now supports a &lt;code&gt;--replace&lt;/code&gt; switch
to take this to the extreme and switch all of &lt;code&gt;/usr&lt;/code&gt;. This
is essentially a big hammer, so use with care.&lt;/p&gt;

&lt;p&gt;As usual, please remember that details of the &lt;code&gt;livefs&lt;/code&gt;
command may change in a future release.&lt;/p&gt;

&lt;p&gt;Upstream patch: &lt;a href="https://github.com/projectatomic/rpm-ostree/pull/1028"&gt;https://github.com/projectatomic/rpm-ostree/pull/1028&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;Other minor fixes and improvements&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;The &lt;code&gt;upgrade&lt;/code&gt;, &lt;code&gt;deploy&lt;/code&gt;, and &lt;code&gt;rebase&lt;/code&gt; commands learned new
&lt;code&gt;--download-only&lt;/code&gt; and &lt;code&gt;--cache-only&lt;/code&gt; switches. This is
analogous to &lt;code&gt;dnf&lt;/code&gt;&amp;rsquo;s &lt;code&gt;--downloadonly&lt;/code&gt; and &lt;code&gt;--cacheonly&lt;/code&gt;
switches, but extends to layered packages as well.&lt;/li&gt;
&lt;li&gt;Related to the previous item, a new &lt;code&gt;refresh-md&lt;/code&gt; command
was added to support refreshing the rpm-md. This is
analogous to &lt;code&gt;dnf&lt;/code&gt;&amp;rsquo;s &lt;code&gt;makecache&lt;/code&gt; command.&lt;/li&gt;
&lt;li&gt;In the spirit of making rpm-ostree the only front-facing
application, a new &lt;code&gt;usroverlay&lt;/code&gt; command was added to take
over the functionality of &lt;code&gt;ostree admin unlock&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;compose tree&lt;/code&gt; subcommand has now been split into
three subcommands: &lt;code&gt;install&lt;/code&gt;, &lt;code&gt;postprocess&lt;/code&gt;, and &lt;code&gt;commit&lt;/code&gt;.
This can be used to more easily customize the rootfs
before committing it to the OSTree repo.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;db diff&lt;/code&gt; command now can use commit metadata to
retrive package lists. This means that one no longer needs
to have the full commit when performing diffs.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;status&lt;/code&gt; command learned a new &lt;code&gt;--booted&lt;/code&gt; switch to
only display information about the booted deployment.&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  <entry>
    <title>The Many Ways to Build an OCI Image without Docker</title>
    <link rel="alternate" href="http://www.projectatomic.io/blog/2018/03/the-many-ways-to-build-oci-images/"/>
    <id>http://www.projectatomic.io/blog/2018/03/the-many-ways-to-build-oci-images/</id>
    <published>2018-03-06T00:00:00+00:00</published>
    <updated>2021-10-07T14:03:16+00:00</updated>
    <author>
      <name>Micah Abbott</name>
    </author>
    <content type="html">&lt;p&gt;When containers initially made their big splash into the industry via Docker,
users were almost required to use the &lt;code&gt;docker&lt;/code&gt; CLI and daemon to create and
manage their container images.  But a lot has happened since then and now it
is easier than ever to create a container image without using &lt;code&gt;docker&lt;/code&gt; at all,
since the Docker image format has been standardized as the
&lt;a href="https://github.com/opencontainers/image-spec"&gt;OCI Image format&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In this post, we&amp;rsquo;ll review some of the ways you can create and manage your
container images without ever having to start the &lt;code&gt;docker&lt;/code&gt; daemon.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;We&amp;rsquo;ll explore these alternative ways to build container images using a
privileged user, but most of the approaches also have a way to build images
using a non-privileged user.  We&amp;rsquo;ll cover using a non-privileged user in a
future blog post.&lt;/p&gt;

&lt;h3&gt;orca-build&lt;/h3&gt;

&lt;p&gt;The project that was probably first to build container images without &lt;code&gt;docker&lt;/code&gt;
is the &lt;a href="https://github.com/cyphar/orca-build"&gt;orca-build&lt;/a&gt; project from
&lt;a href="https://twitter.com/lordcyphar"&gt;Aleksa Sarai&lt;/a&gt; of SUSE.  He&amp;rsquo;s created a simple
Python3 script which leverages &lt;a href="https://github.com/opencontainers/runc"&gt;runC&lt;/a&gt;,
&lt;a href="http://github.com/projectatomic/skopeo"&gt;skopeo&lt;/a&gt;, and the
&lt;a href="https://github.com/openSUSE/umoci"&gt;umoci&lt;/a&gt; library to build container images.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s see how it works with this simple Dockerfile that I&amp;rsquo;ve created to build
an &lt;code&gt;httpd&lt;/code&gt; container.&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ cat fedora27-httpd/Dockerfile
FROM registry.fedoraproject.org/fedora:27
LABEL maintainer='Micah Abbott &amp;lt;miabbott@redhat.com&amp;gt;' \
      version='1.0'

ENV container=docker

COPY Dockerfile /root/

RUN dnf -y install httpd &amp;amp;&amp;amp; \
    dnf clean all &amp;amp;&amp;amp; \
    echo "SUCCESS fedora27_httpd" &amp;gt; /var/www/html/index.html

EXPOSE 80

ENTRYPOINT [ "/usr/sbin/httpd" ]
CMD [ "-D", "FOREGROUND" ]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Using a Fedora 27 system, I&amp;rsquo;ll install the dependencies for using &lt;code&gt;orca-build&lt;/code&gt;
and then build the container image from the Dockerfile.  (But obviously, I
won&amp;rsquo;t be installing &lt;code&gt;docker&lt;/code&gt;).&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# rpm -q docker
package docker is not installed
# systemctl status docker
Unit docker.service could not be found.

# dnf -y install git golang runc skopeo
# export GOPATH=$HOME/go
# export PATH=$PATH:$GOPATH/bin
# go get -d github.com/openSUSE/umoci
# cd $GOPATH/src/github.com/openSUSE/umoci/
# make
# cp $GOPATH/src/github.com/openSUSE/umoci/umoci $GOPATH/bin/
# cd $HOME
# git clone https://github.com/cyphar/orca-build.git
# cd orca-build
# python3 orca-build -t fedora27-httpd:orca $HOME/fedora27-httpd/
orca-build[INFO] Created new image for build: /tmp/orca-build.y3n_2i0m
orca-build[INFO] BUILD[1 of 8]: from ['registry.fedoraproject.org/fedora:27'] [json=False]
  ---&amp;gt; [skopeo]
Getting image source signatures
Copying blob sha256:d445b8c354cc48e75ed621cb6783a80c29ac24135cdd98fd02ae70e1f18345bc
 80.81 MB / 80.81 MB [=====================================================] 10s
Copying config sha256:400ec4f003634cb31d8b37d68ac56c41c6bbd8eb02eb7d7151b0ade59e513594
 424 B / 424 B [============================================================] 0s
Writing manifest to image destination
Storing signatures
  &amp;lt;--- [skopeo]
orca-build[INFO] BUILD[2 of 8]: label ['maintainer=Micah Abbott &amp;lt;miabbott@redhat.com&amp;gt;', 'version=1.0'] [json=False]
  ---&amp;gt; [umoci]
  &amp;lt;--- [umoci]
  ---&amp;gt; [umoci]
  &amp;lt;--- [umoci]
orca-build[INFO] BUILD[3 of 8]: env ['container=docker'] [json=False]
  ---&amp;gt; [umoci]
  &amp;lt;--- [umoci]
  ---&amp;gt; [umoci]
  &amp;lt;--- [umoci]
orca-build[INFO] BUILD[4 of 8]: copy ['Dockerfile', '/root/'] [json=False]
  ---&amp;gt; [umoci]
  &amp;lt;--- [umoci]
  ---&amp;gt; [umoci]
  &amp;lt;--- [umoci]
  ---&amp;gt; [umoci]
  &amp;lt;--- [umoci]
orca-build[INFO] BUILD[5 of 8]: run ['dnf', '-y', 'install', 'httpd', '&amp;amp;&amp;amp;', 'dnf', 'clean', 'all', '&amp;amp;&amp;amp;', 'echo', 'SUCCESS fedora27_httpd', '&amp;gt;', '/var/www/html/index.html'] [json=False]
  ---&amp;gt; [umoci]
  &amp;lt;--- [umoci]
  ---&amp;gt; [runc]
Error: Failed to synchronize cache for repo 'updates'
  &amp;lt;--- [runc]
orca-build[CRITICAL] Error executing subprocess: runc --root=/tmp/orca-runcroot.un2g__rz run --bundle=/tmp/orca-bundle.dw5x64x0 orca-build-6bE2dWZlNxyZELMtkmHjObCb9fAkvMbq failed with error code 1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Hmmm&amp;hellip;I believe &lt;code&gt;runc&lt;/code&gt; doesn&amp;rsquo;t have network access to allow &lt;code&gt;dnf&lt;/code&gt; to install
packages.  That is disappointing.  But I don&amp;rsquo;t want to spend too much time on
any one way of building an image, so let&amp;rsquo;s move on to another method.&lt;/p&gt;

&lt;h3&gt;jessfraz/img&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://twitter.com/jessfraz"&gt;Jessie Frazelle&lt;/a&gt; recently announced her own
project called &lt;a href="https://github.com/jessfraz/img"&gt;img&lt;/a&gt; that handles building
OCI images without &lt;code&gt;docker&lt;/code&gt;. Her approach uses a Go binary that leverages
&lt;a href="https://github.com/moby/buildkit"&gt;buildkit&lt;/a&gt; from the Moby project to build
images.&lt;/p&gt;

&lt;p&gt;Using the same Dockerfile and Fedora 27 system, let&amp;rsquo;s try to build the image.&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# go get github.com/jessfraz/img
# img build -t fedora27-httpd:img $HOME/fedora27-httpd/
Building fedora27-httpd:img
Setting up the rootfs... this may take a bit.
INFO[0001] resolving docker.io/tonistiigi/copy@sha256:476e0a67a1e4650c6adaf213269a2913deb7c52cbc77f954026f769d51e1a14e
INFO[0001] resolving registry.fedoraproject.org/fedora:27@sha256:3a75aec3625da0c80dcedda6a0321f997f812e24336a1c06d8b402afffc55450
INFO[0010] unpacking registry.fedoraproject.org/fedora:27@sha256:3a75aec3625da0c80dcedda6a0321f997f812e24336a1c06d8b402afffc55450
RUN [copy /src-0/Dockerfile /dest/root/]
---&amp;gt;
&amp;lt;--- e70rtudliv77emdm70tc5m027 0 &amp;lt;nil&amp;gt;
RUN [/bin/sh -c dnf -y install httpd &amp;amp;&amp;amp;     dnf clean all &amp;amp;&amp;amp;     echo "SUCCESS fedora27_httpd" &amp;gt; /var/www/html/index.html]
---&amp;gt;
Fedora 27 - x86_64 - Updates                    8.8 MB/s |  20 MB     00:02
Fedora 27 - x86_64                              6.1 MB/s |  58 MB     00:09
Last metadata expiration check: 0:00:05 ago on Sat Mar  3 21:06:25 2018.
Dependencies resolved.
================================================================================
 Package                  Arch         Version              Repository     Size
================================================================================
Installing:
 httpd                    x86_64       2.4.29-1.fc27        updates       1.3 M
Installing dependencies:
 apr                      x86_64       1.6.3-1.fc27         updates       121 k
 apr-util                 x86_64       1.6.1-2.fc27         updates       102 k
 fedora-logos-httpd       noarch       28.0.2-1.fc27        updates        33 k
 httpd-filesystem         noarch       2.4.29-1.fc27        updates        25 k
 httpd-tools              x86_64       2.4.29-1.fc27        updates        89 k
 mailcap                  noarch       2.1.48-2.fc27        fedora         37 k
 mod_http2                x86_64       1.10.13-1.fc27       updates       151 k

Transaction Summary
================================================================================
Install  8 Packages

Total download size: 1.9 M
Installed size: 5.0 M
Downloading Packages:
(1/8): httpd-filesystem-2.4.29-1.fc27.noarch.rp  66 kB/s |  25 kB     00:00
(2/8): mailcap-2.1.48-2.fc27.noarch.rpm         431 kB/s |  37 kB     00:00
(3/8): httpd-tools-2.4.29-1.fc27.x86_64.rpm     136 kB/s |  89 kB     00:00
(4/8): apr-1.6.3-1.fc27.x86_64.rpm              319 kB/s | 121 kB     00:00
(5/8): apr-util-1.6.1-2.fc27.x86_64.rpm         338 kB/s | 102 kB     00:00
(6/8): mod_http2-1.10.13-1.fc27.x86_64.rpm      728 kB/s | 151 kB     00:00
(7/8): fedora-logos-httpd-28.0.2-1.fc27.noarch. 332 kB/s |  33 kB     00:00
(8/8): httpd-2.4.29-1.fc27.x86_64.rpm           984 kB/s | 1.3 MB     00:01
--------------------------------------------------------------------------------
Total                                           857 kB/s | 1.9 MB     00:02
Running transaction check
Transaction check succeeded.
Running transaction test
Transaction test succeeded.
Running transaction
  Preparing        :                                                        1/1
  Installing       : apr-1.6.3-1.fc27.x86_64                                1/8
  Running scriptlet: apr-1.6.3-1.fc27.x86_64                                1/8
  Installing       : apr-util-1.6.1-2.fc27.x86_64                           2/8
  Running scriptlet: apr-util-1.6.1-2.fc27.x86_64                           2/8
  Installing       : httpd-tools-2.4.29-1.fc27.x86_64                       3/8
  Installing       : fedora-logos-httpd-28.0.2-1.fc27.noarch                4/8
  Installing       : mailcap-2.1.48-2.fc27.noarch                           5/8
  Running scriptlet: httpd-filesystem-2.4.29-1.fc27.noarch                  6/8
  Installing       : httpd-filesystem-2.4.29-1.fc27.noarch                  6/8
  Installing       : mod_http2-1.10.13-1.fc27.x86_64                        7/8
  Installing       : httpd-2.4.29-1.fc27.x86_64                             8/8
  Running scriptlet: httpd-2.4.29-1.fc27.x86_64                             8/8Failed to connect to bus: No such file or directory

  Verifying        : httpd-2.4.29-1.fc27.x86_64                             1/8
  Verifying        : httpd-filesystem-2.4.29-1.fc27.noarch                  2/8
  Verifying        : httpd-tools-2.4.29-1.fc27.x86_64                       3/8
  Verifying        : mailcap-2.1.48-2.fc27.noarch                           4/8
  Verifying        : apr-1.6.3-1.fc27.x86_64                                5/8
  Verifying        : apr-util-1.6.1-2.fc27.x86_64                           6/8
  Verifying        : mod_http2-1.10.13-1.fc27.x86_64                        7/8
  Verifying        : fedora-logos-httpd-28.0.2-1.fc27.noarch                8/8

Installed:
  httpd.x86_64 2.4.29-1.fc27            apr.x86_64 1.6.3-1.fc27
  apr-util.x86_64 1.6.1-2.fc27          fedora-logos-httpd.noarch 28.0.2-1.fc27
  httpd-filesystem.noarch 2.4.29-1.fc27 httpd-tools.x86_64 2.4.29-1.fc27
  mailcap.noarch 2.1.48-2.fc27          mod_http2.x86_64 1.10.13-1.fc27

Complete!
18 files removed
&amp;lt;--- rx3j12yy3t0ea0shbimrgxtdx 0 &amp;lt;nil&amp;gt;
INFO[0063] exporting layers
INFO[0066] exporting manifest sha256:1fd9c488a4f116e3d02c5ea0d9277994bc8145ea7bb5021442b348b257b7b6e6
INFO[0066] exporting config sha256:ae05d003b8ec6d046eb73ca8d3333a9d6e10bac332af7591a101f6f118f2bf7c
INFO[0066] naming to fedora27-httpd:img
Successfully built fedora27-httpd:img
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We can also use &lt;code&gt;img&lt;/code&gt; to list the container image that was just built.&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# img ls
NAME                                        SIZE        CREATED AT  UPDATED AT  DIGEST
docker.io/tonistiigi/copy@sha256:476e0a67a1e4650c6adaf213269a2913deb7c52cbc77f954026f769d51e1a14e   1.333KiB    7 days ago  7 days ago  sha256:476e0a67a1e4650c6adaf213269a2913deb7c52cbc77f954026f769d51e1a14e
fedora27-httpd:img                              754B        7 days ago  43 hours ago    sha256:1fd9c488a4f116e3d02c5ea0d9277994bc8145ea7bb5021442b348b257b7b6e6
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That was pretty easy and successful!  There are more things that &lt;code&gt;img&lt;/code&gt; can
do, but let&amp;rsquo;s continue to expore other ways to build container images.&lt;/p&gt;

&lt;h3&gt;DIY Docker using Skopeo+OStree+Runc&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://twitter.com/muayyadalsadi"&gt;Muayyad Alsadi&lt;/a&gt; recently shared his blog
post called &lt;a href="https://bcksp.blogspot.com/2018/02/diy-docker-using-skopeoostreerunc.html"&gt;DIY Docker using Skopeo+OStree+Runc&lt;/a&gt;
to the &lt;a href="https://lists.projectatomic.io/projectatomic-archives/atomic-devel/2018-February/msg00087.html"&gt;atomic-devel&lt;/a&gt;
mailing list.  In his post, he describes using &lt;code&gt;skopeo&lt;/code&gt; and &lt;code&gt;ostree&lt;/code&gt; to pull
down existing Docker images and building out a rootfs that can be used by
&lt;code&gt;runc&lt;/code&gt;.  It is not exactly the same operation as building a container image
from a Dockerfile, but it is a useful exercise to show off some of the gory
details of working with OCI images.&lt;/p&gt;

&lt;p&gt;But what if you don&amp;rsquo;t want to have to run multiple &lt;code&gt;skopeo&lt;/code&gt; and &lt;code&gt;ostree&lt;/code&gt;
commands to pull down content and prep a container image?  Or maybe you don&amp;rsquo;t
really care about the details of OCI images and you just want to pull a
container image without &lt;code&gt;docker&lt;/code&gt;?&lt;/p&gt;

&lt;p&gt;All of those operations are neatly wrapped up in the &lt;a href="http://github.com/projectatomic/atomic"&gt;atomic CLI&lt;/a&gt;
and can be reduced to a single command!&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt; # atomic pull --storage=ostree docker.io/redis:alpine
Getting image source signatures
Copying blob sha256:ff3a5c916c92643ff77519ffa742d3ec61b7f591b6b7504599d95a4a41134e28
 1.97 MB / 1.97 MB [========================================================] 0s
Copying blob sha256:aae70a2e60279ffae89150a59b81fe10d1d81f341ef6f31b9714ea6cc3418577
 1.22 KB / 1.22 KB [========================================================] 0s
Copying blob sha256:87c655da471c9a7d8f946ec7b04a6a72a98ae8c1734bddf4b950861b5638fe20
 8.35 KB / 8.35 KB [========================================================] 0s
Copying blob sha256:a0bd51ac7350a7048a0bd85a83d87181a0b851952e94f70e18c1ddb6ff96e66e
 7.73 MB / 7.73 MB [========================================================] 0s
Copying blob sha256:755565c3ea2b1335705a21024b1bdb607f85492b284e8dec37eb759c0d601f57
 99 B / 99 B [==============================================================] 0s
Copying blob sha256:8bf100ea488d16d4401a9af72879db0c1ab56045b42670ebf64fe1f8d90568fc
 397 B / 397 B [============================================================] 0s
Copying config sha256:d3117424aaee14ab2b0edb68d3e3dcc1785b2e243b06bd6322f299284c640465
 4.68 KB / 4.68 KB [========================================================] 0s
Writing manifest to image destination
Storing signatures
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And soon, you&amp;rsquo;ll be able to use the very same &lt;code&gt;atomic&lt;/code&gt; command to run the
container image via &lt;code&gt;runc&lt;/code&gt;.  Keep your eyes open for new versions of &lt;code&gt;atomic&lt;/code&gt;
that will include this &lt;a href="https://github.com/projectatomic/atomic/pull/1196"&gt;pull request&lt;/a&gt;
from &lt;a href="https://twitter.com/gscrivano"&gt;Giuseppe Scrivano&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;There&amp;rsquo;s one more way to build container images that we&amp;rsquo;ll cover before
wrapping up this post.&lt;/p&gt;

&lt;h3&gt;Use This One Weird Command to Build OCI Images!&lt;/h3&gt;

&lt;p&gt;Maybe you are thinking, &lt;q&gt;Gee, it&amp;rsquo;s great that we have all these ways to build
container images without Docker, but I&amp;rsquo;d really like a tool that highlights my
Boston accent.&lt;/q&gt;&lt;/p&gt;

&lt;p&gt;Enter &lt;a href="https://github.com/projectatomic/buildah"&gt;buildah&lt;/a&gt;!&lt;/p&gt;

&lt;p&gt;You&amp;rsquo;ve probably already seen this tool mentioned on this blog a few times,
but it&amp;rsquo;s worth showing off another time just how easy it is to install and use.
We&amp;rsquo;ll continue to use the same Dockerfile and Fedora 27 system to build our
image.&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# dnf install buildah
# buildah bud -t fedora27_httpd:buildah $HOME/fedora27-httpd/
STEP 1: FROM registry.fedoraproject.org/fedora:27
Getting image source signatures
Copying blob sha256:d445b8c354cc48e75ed621cb6783a80c29ac24135cdd98fd02ae70e1f18345bc
 80.81 MiB / 80.81 MiB [===================================================] 32s
Copying config sha256:99b71991af6eef73e85e3a657641cf2447929f37fff1f9570d525a6ef485a4a8
 1.27 KiB / 1.27 KiB [======================================================] 0s
Writing manifest to image destination
Storing signatures
STEP 2: LABEL maintainer='Micah Abbott &amp;lt;miabbott@redhat.com&amp;gt;'       version='1.0'
STEP 3: ENV container=docker
STEP 4: COPY Dockerfile /root/
STEP 5: RUN dnf -y install httpd &amp;amp;&amp;amp;     dnf clean all &amp;amp;&amp;amp;     echo "SUCCESS fedora27_httpd" &amp;gt; /var/www/html/index.html
Fedora 27 - x86_64 - Updates                    3.0 MB/s |  20 MB     00:06
Fedora 27 - x86_64                              1.6 MB/s |  58 MB     00:35
Last metadata expiration check: 0:00:08 ago on Mon Mar  5 16:02:41 2018.
Dependencies resolved.
================================================================================
 Package                  Arch         Version              Repository     Size
================================================================================
Installing:
 httpd                    x86_64       2.4.29-1.fc27        updates       1.3 M
Installing dependencies:
 apr                      x86_64       1.6.3-1.fc27         updates       121 k
 apr-util                 x86_64       1.6.1-2.fc27         updates       102 k
 fedora-logos-httpd       noarch       28.0.2-1.fc27        updates        33 k
 httpd-filesystem         noarch       2.4.29-1.fc27        updates        25 k
 httpd-tools              x86_64       2.4.29-1.fc27        updates        89 k
 mailcap                  noarch       2.1.48-2.fc27        fedora         37 k
 mod_http2                x86_64       1.10.13-1.fc27       updates       151 k

Transaction Summary
================================================================================
Install  8 Packages

Total download size: 1.9 M
Installed size: 5.0 M
Downloading Packages:
(1/8): httpd-filesystem-2.4.29-1.fc27.noarch.rp 107 kB/s |  25 kB     00:00
(2/8): httpd-tools-2.4.29-1.fc27.x86_64.rpm     208 kB/s |  89 kB     00:00
(3/8): mailcap-2.1.48-2.fc27.noarch.rpm         127 kB/s |  37 kB     00:00
(4/8): apr-util-1.6.1-2.fc27.x86_64.rpm         452 kB/s | 102 kB     00:00
(5/8): apr-1.6.3-1.fc27.x86_64.rpm              305 kB/s | 121 kB     00:00
(6/8): fedora-logos-httpd-28.0.2-1.fc27.noarch. 355 kB/s |  33 kB     00:00
(7/8): mod_http2-1.10.13-1.fc27.x86_64.rpm      699 kB/s | 151 kB     00:00
(8/8): httpd-2.4.29-1.fc27.x86_64.rpm           1.1 MB/s | 1.3 MB     00:01
--------------------------------------------------------------------------------
Total                                           933 kB/s | 1.9 MB     00:02
Running transaction check
Transaction check succeeded.
Running transaction test
Transaction test succeeded.
Running transaction
  Preparing        :                                                        1/1
  Installing       : apr-1.6.3-1.fc27.x86_64                                1/8
  Running scriptlet: apr-1.6.3-1.fc27.x86_64                                1/8
  Installing       : apr-util-1.6.1-2.fc27.x86_64                           2/8
  Running scriptlet: apr-util-1.6.1-2.fc27.x86_64                           2/8
  Installing       : httpd-tools-2.4.29-1.fc27.x86_64                       3/8
  Installing       : fedora-logos-httpd-28.0.2-1.fc27.noarch                4/8
  Installing       : mailcap-2.1.48-2.fc27.noarch                           5/8
  Running scriptlet: httpd-filesystem-2.4.29-1.fc27.noarch                  6/8
  Installing       : httpd-filesystem-2.4.29-1.fc27.noarch                  6/8
  Installing       : mod_http2-1.10.13-1.fc27.x86_64                        7/8
  Installing       : httpd-2.4.29-1.fc27.x86_64                             8/8
  Running scriptlet: httpd-2.4.29-1.fc27.x86_64                             8/8
Failed to connect to bus: No such file or directory
  Verifying        : httpd-2.4.29-1.fc27.x86_64                             1/8
  Verifying        : httpd-filesystem-2.4.29-1.fc27.noarch                  2/8
  Verifying        : httpd-tools-2.4.29-1.fc27.x86_64                       3/8
  Verifying        : mailcap-2.1.48-2.fc27.noarch                           4/8
  Verifying        : apr-1.6.3-1.fc27.x86_64                                5/8
  Verifying        : apr-util-1.6.1-2.fc27.x86_64                           6/8
  Verifying        : mod_http2-1.10.13-1.fc27.x86_64                        7/8
  Verifying        : fedora-logos-httpd-28.0.2-1.fc27.noarch                8/8

Installed:
  httpd.x86_64 2.4.29-1.fc27            apr.x86_64 1.6.3-1.fc27
  apr-util.x86_64 1.6.1-2.fc27          fedora-logos-httpd.noarch 28.0.2-1.fc27
  httpd-filesystem.noarch 2.4.29-1.fc27 httpd-tools.x86_64 2.4.29-1.fc27
  mailcap.noarch 2.1.48-2.fc27          mod_http2.x86_64 1.10.13-1.fc27

Complete!
18 files removed
STEP 6: EXPOSE 80
STEP 7: ENTRYPOINT [ "/usr/sbin/httpd" ]
STEP 8: CMD [ "-D", "FOREGROUND" ]
STEP 9: COMMIT containers-storage:[overlay@/var/lib/containers/storage+/var/run/containers/storage:overlay.override_kernel_check=true]docker.io/library/fedora27_httpd:buildah
[root@fedora27cloud-dev ~]# buildah images
IMAGE ID             IMAGE NAME                                               CREATED AT             SIZE
99b71991af6e         registry.fedoraproject.org/fedora:27                     Mar 1, 2018 07:48      234.9 MB
c3fddc394f81         docker.io/library/fedora27_httpd:buildah                 Mar 5, 2018 16:03      252 MB

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;On my Fedora 27 host, I just needed two commands to install &lt;code&gt;buildah&lt;/code&gt; and
build the container image!  When you pair &lt;code&gt;buildah&lt;/code&gt; with &lt;code&gt;atomic&lt;/code&gt;, you have
a powerful combination of tools that will allow you to build, manage, and run
your container images without ever having to run the Docker daemon.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>How does Atomic run system containers without Docker Daemon?</title>
    <link rel="alternate" href="http://www.projectatomic.io/blog/2018/03/containers-w-skopeo-ostree-oci/"/>
    <id>http://www.projectatomic.io/blog/2018/03/containers-w-skopeo-ostree-oci/</id>
    <published>2018-03-05T00:00:00+00:00</published>
    <updated>2021-10-07T14:03:16+00:00</updated>
    <author>
      <name>alsadi</name>
    </author>
    <content type="html">&lt;h3&gt;Introduction&lt;/h3&gt;

&lt;p&gt;In 2016, we started to &lt;a href="https://www.projectatomic.io/blog/2016/09/running-kubernetes-in-containers-on-atomic/"&gt;Containerize the Kubernetes stack&lt;/a&gt;,
that is to ship all the components as containers as you can see &lt;a href="https://registry.fedoraproject.org/"&gt;here&lt;/a&gt;.
But some of those containers like &lt;a href="https://coreos.com/etcd/"&gt;etcd&lt;/a&gt; and &lt;a href="https://coreos.com/flannel/docs/latest/"&gt;flanneld&lt;/a&gt;
must be started before Docker daemon because &lt;code&gt;etcd&lt;/code&gt; is the cluster state store,
and &lt;code&gt;flanneld&lt;/code&gt; is the cluster network overlay (SDN).&lt;/p&gt;

&lt;p&gt;In this blog post we are going to demonstrate how to use the same components used by
&lt;a href="http://www.projectatomic.io/"&gt;Project Atomic&lt;/a&gt;
in the so called &lt;a href="https://www.projectatomic.io/blog/2016/09/intro-to-system-containers/"&gt;system containers&lt;/a&gt;
that is to run the containers without a Docker daemon, namely:
&lt;a href="https://github.com/projectatomic/skopeo"&gt;skopeo&lt;/a&gt;,
&lt;a href="https://github.com/ostreedev/ostree"&gt;ostree&lt;/a&gt;, and an OCI runtime like
&lt;a href="https://github.com/opencontainers/runc"&gt;runc&lt;/a&gt;
or &lt;a href="https://github.com/projectatomic/bubblewrap"&gt;bubble wraps&lt;/a&gt; and its &lt;a href="https://github.com/projectatomic/bwrap-oci"&gt;OCI wrapper&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;h3&gt;Background&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;Atomic Host&lt;/code&gt; is an immutable stateless operating system,
that is designed to consume applications via containers.
You can do carefree updates or even switch from &lt;code&gt;CentOS&lt;/code&gt; to &lt;code&gt;Fedora&lt;/code&gt; and vice versa
because of the image-like nature of &lt;code&gt;ostree&lt;/code&gt; and it&amp;rsquo;s carefree because your workloads are in the containers.
It has many use cases like running &lt;code&gt;Kubernetes&lt;/code&gt; clusters,
and there is an ongoing effort to extend it to desktop
(using &lt;a href="https://flatpak.org/"&gt;Flatpak&lt;/a&gt; as the containers for the desktop, which also uses ostree). This desktop variant is called &lt;a href="https://www.projectatomic.io/blog/2018/02/fedora-atomic-workstation/"&gt;Atomic Workstation&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In the containerized Kubernetes stack, there seems to be &lt;q&gt;the chicken or the egg&lt;/q&gt; dilemma,
We need a running &lt;code&gt;flanneld&lt;/code&gt; or &lt;code&gt;etcd&lt;/code&gt; to start Docker Daemon,
and you need a running docker daemon to start flanneld or etcd if they are shipped as containers.&lt;/p&gt;

&lt;p&gt;In this blog post, we are going to demonstrate how to pull docker container images
and run them the same way as the &lt;a href="https://github.com/projectatomic/atomic"&gt;Atomic tool&lt;/a&gt; does.&lt;/p&gt;

&lt;p&gt;If you inspected the &lt;code&gt;flannel&lt;/code&gt; container image (either using &lt;code&gt;docker inspect&lt;/code&gt; or remotely with &lt;code&gt;skopeo inspect&lt;/code&gt;)
you would see that it has a label called &lt;code&gt;atomic.type&lt;/code&gt; indicating it is a system container.&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ skopeo inspect docker://registry.fedoraproject.org/f27/flannel
{
    "Name": "registry.fedoraproject.org/f27/flannel",
    "Labels": {
        "atomic.type": "system",
// ...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Either that or by passing &lt;code&gt;--system&lt;/code&gt; after &lt;code&gt;atomic install&lt;/code&gt;,
those are special containers that are executed without Docker daemon,
those containers have &lt;a href="http://www.projectatomic.io/blog/2016/09/intro-to-system-containers/"&gt;a special directory structure&lt;/a&gt;
like their &lt;code&gt;systemd&lt;/code&gt; service template as you can see in the source of &lt;a href="https://src.fedoraproject.org/container/flannel/blob/master/f/Dockerfile#_23"&gt;Fedora&amp;rsquo;s flannel container source&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The steps in this article are inspired by &lt;a href="https://github.com/projectatomic/atomic/blob/v1.22/Atomic/syscontainers.py"&gt;how atomic tool work under the hood&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;You can follow those steps on atomic host or in your regular OS (I&amp;rsquo;ve tested them on regular Fedora Workstation),
and you don&amp;rsquo;t need to be root.&lt;/p&gt;

&lt;h3&gt;OSTree - a space-efficient way to store images locally&lt;/h3&gt;

&lt;p&gt;OSTree is the same technology used by Atomic host to store its own host OS images.
It&amp;rsquo;s a content-addressable object storage to store files,
which means a file is stored once even if it&amp;rsquo;s in multiple images,
this is even more efficient than layer-based Docker&amp;rsquo;s storage backends, because it&amp;rsquo;s not on layer level, but on file level.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s start by creating a directory and initializing it to contain bare OSTree repo,
but because we are running as non-root we need to pass &lt;code&gt;--mode=bare-user&lt;/code&gt; instead of &lt;code&gt;--mode=bare&lt;/code&gt;&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ mkdir ostree
$ cd ostree
$ ostree init --mode=bare-user --repo=$PWD
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Skopeo - for dealing with container Images and Image registries&lt;/h3&gt;

&lt;p&gt;Skopeo can inspect remote container images from various registries and formats,
pull them, and store them in many kinds of ways. 
We are going to demonstrate how to pull small images and run them,
so for this purpose let&amp;rsquo;s choose some small few megabytes images like &lt;code&gt;docker://redis:alpine&lt;/code&gt;.&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ skopeo copy docker://redis:alpine ostree:redis@$PWD
$ skopeo copy docker://nginx:alpine ostree:nginx@$PWD
$ skopeo copy docker://busybox:alpine ostree:busybox@$PWD
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can list images in OSTree using:&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ ostree refs
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The interesting part of the output looks like:&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;ociimage/redis_3Alatest
ociimage/nginx_3Alatest
ociimage/busybox_3Alatest
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The Atomic command like tool is written in python, and it uses &lt;code&gt;libostree&lt;/code&gt; via &lt;code&gt;gobject-introspection&lt;/code&gt;, it looks like &lt;a href="https://github.com/projectatomic/atomic/blob/v1.22/Atomic/syscontainers.py#L26"&gt;this&lt;/a&gt;.&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import gi
gi.require_version('OSTree', '1.0')
from gi.repository import OSTree
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For our article we are going to use &lt;code&gt;ostree&lt;/code&gt; command line interface:&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ ostree ls ociimage/redis_3Alatest 
d00755 1000 1000      0 /
-00644 1000 1000   1568 /manifest.json
$ ostree cat ociimage/redis_3Alatest /manifest.json
{
// ...
   "config": {
      "mediaType": "application/vnd.docker.container.image.v1+json",
      "size": 4791,
      "digest": "sha256:d3117424aaee14ab2b0edb68d3e3dcc1785b2e243b06bd6322f299284c640465"
   },
// ...
   "layers": [
      {
         "mediaType": "application/vnd.docker.image.rootfs.diff.tar.gzip",
         "size": 2065537,
         "digest": "sha256:ff3a5c916c92643ff77519ffa742d3ec61b7f591b6b7504599d95a4a41134e28"
      },
      //  ..
    ]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We are going to use &lt;code&gt;jq&lt;/code&gt; tool to get the specific parts from this JSON like getting the config digest:&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ config_hash=`ostree cat ociimage/redis_3Alatest /manifest.json | jq -r .config.digest | cut -d ':' -f 2`
$ ostree cat ociimage/$config_hash /content | jq 
{
// ...
}
$ ostree cat ociimage/$config_hash /content | jq .config.Entrypoint
["docker-entrypoint.sh"]
$ ostree cat ociimage/$config_hash /content | jq .config.Cmd
["redis-server"]
$ ostree cat ociimage/$config_hash /content | jq .config.ExposedPorts
{"6379/tcp": {}}
$ ostree cat ociimage/$config_hash /content | jq .config.Volumes
{"/data": {}}
$ ostree cat ociimage/$config_hash /content | jq .config.WorkingDir
"/data"
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Let&amp;rsquo;s create a directory for our container and apply layers one by one inside that directory,
using &lt;code&gt;ostree checkout&lt;/code&gt;.&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ mkdir -p cont1/rootfs
$ ostree checkout --union ociimage/redis_3Alatest cont1
$ cat cont1/manifest.json | jq -r '.layers[]|.digest' | cut -d ':' -f 2 |
  while read a
  do
    ostree checkout --union ociimage/$a cont1/rootfs;
  done
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We can reverse the order of layers (using &lt;code&gt;tac&lt;/code&gt;) and use &lt;code&gt;--union-add&lt;/code&gt; instead of &lt;code&gt;--union&lt;/code&gt;.&lt;/p&gt;

&lt;h3&gt;Running the container using OCI runtimes&lt;/h3&gt;

&lt;h4&gt;Runc&lt;/h4&gt;

&lt;p&gt;Now we have checked out the redis root filesystem in &lt;code&gt;cont1/rootfs&lt;/code&gt;,
and that does not take space because they are merely &lt;a href="https://en.wikipedia.org/wiki/Hard_link"&gt;hard links&lt;/a&gt;
to those in our ostree repo. Before we run it, let&amp;rsquo;s generate &lt;a href="https://github.com/opencontainers/runtime-spec/blob/master/config.md"&gt;OCI &lt;code&gt;config.json&lt;/code&gt;&lt;/a&gt; using &lt;code&gt;runc spec&lt;/code&gt;:&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ cd cont1
$ mkdir data
$ runc spec --rootless
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We have added &lt;code&gt;--rootless&lt;/code&gt; because we are not running as root, by default it&amp;rsquo;s configured to run &lt;code&gt;/bin/sh&lt;/code&gt;.&lt;/p&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="s2"&gt;"process"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="s2"&gt;"terminal"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="s2"&gt;"args"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="s2"&gt;"sh"&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="err"&gt;//&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;...&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can edit the file &lt;code&gt;config.json&lt;/code&gt;, for example you can:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;adjust &lt;code&gt;args&lt;/code&gt;: to be the command to be executed, for example &lt;code&gt;&amp;quot;args&amp;quot;: [ &amp;quot;redis-server&amp;quot; ]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;adjust &lt;code&gt;env&lt;/code&gt;: to pass custom environment variables&lt;/li&gt;
&lt;li&gt;adjust &lt;code&gt;cwd&lt;/code&gt;: to set current working directory (in our example,  it could be &lt;code&gt;/data&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;adjust &lt;code&gt;mounts&lt;/code&gt;: to add tmpfs on &lt;q&gt;/tmp&lt;/q&gt; and &lt;q&gt;/var/run&lt;/q&gt; or even &lt;q&gt;/var&lt;/q&gt;, or even bind mount data volumes&lt;/li&gt;
&lt;li&gt;adjust &lt;code&gt;namespaces&lt;/code&gt;: to add &lt;code&gt;{&amp;quot;type&amp;quot;: &amp;quot;network&amp;quot;}&lt;/code&gt; to make a separated network stack otherwise it would use host networking&lt;/li&gt;
&lt;li&gt;you can adjust mapping between users &lt;code&gt;&amp;quot;linux&amp;quot;: { &amp;quot;uidMappings&amp;quot;: [ ... ] }&lt;/code&gt; typically containers root is the current user&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Atomic system containers can ship a template for config.json as in &lt;a href="https://src.fedoraproject.org/container/flannel/blob/master/f/config.json.template"&gt;flannel&amp;rsquo;s config.json.template&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Here is how you can attach a writable directory for &lt;code&gt;/data&lt;/code&gt; (which is &lt;code&gt;cont1/data&lt;/code&gt; we have created before):&lt;/p&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="err"&gt;//&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;...&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="s2"&gt;"mounts"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="s2"&gt;"destination"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"/data"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="s2"&gt;"type"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"bind"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="s2"&gt;"source"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"data"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="s2"&gt;"options"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"rbind"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;"rw"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="err"&gt;//&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;...&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="err"&gt;//&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;...&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To run the container type &lt;code&gt;runc run&lt;/code&gt; followed by any name like &lt;code&gt;redis&lt;/code&gt;.&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ runc run redis 
1:C 03 Mar 16:13:06.463 # oO0OoO0OoO0Oo Redis is starting oO0OoO0OoO0Oo
1:C 03 Mar 16:13:06.474 # Redis version=4.0.8, bits=64, commit=00000000, modified=0, pid=1, just started
...                _._                                                  
           _.-``__ ''-._                                             
      _.-``    `.  `_.  ''-._           Redis 4.0.8 (00000000/0) 64 bit
  .-`` .-```.  ```\/    _.,_ ''-._                                   
 (    '      ,       .-`  | `,    )     Running in standalone mode
 |`-._`-...-` __...-.``-._|'` _.-'|     Port: 6379
 |    `-._   `._    /     _.-'    |     PID: 1
  `-._    `-._  `-./  _.-'    _.-'                                   
 |`-._`-._    `-.__.-'    _.-'_.-'|                                  
 |    `-._`-._        _.-'_.-'    |           http://redis.io        
  `-._    `-._`-.__.-'_.-'    _.-'                                   
 |`-._`-._    `-.__.-'    _.-'_.-'|                                  
 |    `-._`-._        _.-'_.-'    |                                  
  `-._    `-._`-.__.-'_.-'    _.-'                                   
      `-._    `-.__.-'    _.-'                                       
          `-._        _.-'                                           
              `-.__.-'                                               

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In another terminal you can have a shell inside the container using &lt;code&gt;runc exec redis /bin/sh&lt;/code&gt;:&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ runc exec redis /bin/sh
/data # ps -a
PID   USER     TIME   COMMAND
    1 root       0:00 redis-server
   18 root       0:00 /bin/sh
   24 root       0:00 ps -a
/data # 
&lt;/code&gt;&lt;/pre&gt;

&lt;h4&gt;Bubble Wraps OCI&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;bwrap-oci&lt;/code&gt; is another OCI runtime that is designed for userspace containers (non-root)
You can use the same &lt;code&gt;config.json&lt;/code&gt; we made in previous section.
There was &lt;a href="https://github.com/projectatomic/bwrap-oci/pull/17"&gt;a bug&lt;/a&gt; in &lt;code&gt;bwrap-oci&lt;/code&gt;,
that&amp;rsquo;s why you need to build it from source.&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ bwrap-oci run redis
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can list running Bubble wrapped containers using &lt;code&gt;bwrap-oci list&lt;/code&gt;&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ bwrap-oci list
NAME                          PID       STATUS    BUNDLE
redis                         23369     running   /home/alsadi/ostree/cont1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Unfortunately there is no &lt;code&gt;bwrap-oci exec&lt;/code&gt;.&lt;/p&gt;

&lt;h3&gt;Atomic Options&lt;/h3&gt;

&lt;p&gt;Atomic Install has corresponding options to the choices we have demonstrated in this article like:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;--storage=ostree|docker&lt;/code&gt; whether to use &lt;code&gt;docker&lt;/code&gt; or &lt;code&gt;ostree&lt;/code&gt; to store the image&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--runtime=/bin/bwrap-oci&lt;/code&gt; for user containers or when &lt;code&gt;--user&lt;/code&gt; is passed&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--runtime=/bin/runc&lt;/code&gt; for system containers or when &lt;code&gt;--system&lt;/code&gt; is passed&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For more details type &lt;code&gt;man atomic install&lt;/code&gt;.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Composing custom OSTree update for Fedora 27 Atomic Host</title>
    <link rel="alternate" href="http://www.projectatomic.io/blog/2017/12/compose-custom-ostree/"/>
    <id>http://www.projectatomic.io/blog/2017/12/compose-custom-ostree/</id>
    <published>2017-12-19T12:00:00+00:00</published>
    <updated>2021-10-07T14:03:16+00:00</updated>
    <author>
      <name>Sinny Kumari</name>
    </author>
    <content type="html">&lt;p&gt;With Fedora 27, we ship &lt;a href="http://www.projectatomic.io/blog/2017/11/fedora-atomic-27-on-multiarch/"&gt;Atomic Host on multiple architectures&lt;/a&gt; which includes aarch64, ppc64le, and x86_64. We also provide Atomic Host updates for these arches every two weeks so that we can provide a tested, stable, and up-to-date OS. Fedora Atomic Host is built using traditional RPM packages available in the Fedora repository. For example, Fedora 27 Atomic Host is formed using  packages from the Fedora 27 repository which are further composed into &lt;a href="https://ostree.readthedocs.io/en/latest/manual/introduction/"&gt;OSTree repository&lt;/a&gt; using rpm-ostree. It is possible to compose and host your own custom-built OSTree repository containing additional features. This article will further guide you on how to compose your own custom OSTree repository and update system from your own hosted OSTree repo.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;h3&gt;Composing and hosting custom Atomic OSTree&lt;/h3&gt;

&lt;p&gt;We will be composing a custom Fedora 27 OSTree repository on x86_64. For ease of use, we will compose and host OSTree repo in a Docker container. You can also compose it on a Virtual Machine or bare metal.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;Note:&lt;/code&gt; If you are trying this on aarch64 or ppc64le, replace any mention of x86_64 with the right architecture value wherever used in commands.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4&gt;Requirement&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;A virtual machine or bare metal system with Fedora installed, preferably Fedora 27 which is the latest stable release.&lt;/li&gt;
&lt;li&gt;Docker installed and service running on the machine.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Install Docker and run its service on the system where you are planning to run the container:&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ sudo dnf install docker
$ sudo systemctl start docker
&lt;/code&gt;&lt;/pre&gt;

&lt;h4&gt;Dockerfile&lt;/h4&gt;

&lt;p&gt;Create a Dockerfile with the following content which we will use to build a Docker container using Fedora27 as its base and on top of it some additional setup is being done.&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ cat Dockerfile
FROM fedora:27

# Update, install specified packages and clean cached information
RUN dnf update -y &amp;amp;&amp;amp; dnf install -y git python rpm-ostree; \
dnf clean all

# Create specified directories
RUN mkdir -p /srv /srv/repo /srv/cache

# Set /srv as working directory and clone fedora-atomic repository into it
WORKDIR /srv
RUN git clone https://pagure.io/fedora-atomic.git

# Initialize a new empty repository in /srv/repo/ directory in archive mode
RUN ostree --repo=repo init --mode=archive-z2

# Expose default SimpleHTTPServer port and start SimpleHTTPServer
EXPOSE 8000
CMD python -m SimpleHTTPServer
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;Note:&lt;/code&gt; If you are trying to compose OSTree on aarch64 or ppc64le then modify the first line of your Dockerfile from &lt;code&gt;FROM fedora:27&lt;/code&gt; to &lt;code&gt;FROM docker.io/fedora:27&lt;/code&gt;. This is needed because Docker first tries to pull in the Fedora 27 image from registry.fedoraproject.org which only contains x86_64 images for now.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4&gt;Build Docker image and run container&lt;/h4&gt;

&lt;p&gt;Now, we will build a Docker image from the Dockerfile we just created. In this example, our Dockerfile is available in the current directory.&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ sudo docker build --rm -t $USER/atomicrepo .
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The Docker image has been created in the system which can be accessed with name $USER/atomicrepo. To view available images, run:&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ sudo docker images
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Launch a container in the background from image $USER/atomicrepo we just created which listens on port 8000.&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ sudo docker run --privileged -d -p 8000:8000 --name atomicrepo $USER/atomicrepo
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We now have a running container with SimpleHTTPServer running inside it. Let&amp;rsquo;s get shell access to this container to work further:&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ sudo docker exec -it atomicrepo bash
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We are now inside a running container with current working directory set to /srv.&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# pwd
/srv
&lt;/code&gt;&lt;/pre&gt;

&lt;h4&gt;Composing OSTree repository&lt;/h4&gt;

&lt;p&gt;While building the image, we cloned fedora-atomic repository into &lt;code&gt;/srv/&lt;/code&gt; directory. We will use content from the fedora-atomic repository as reference to build custom OSTree. Let&amp;rsquo;s checkout f27 branch of the fedora-atomic repo:&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# cd fedora-atomic
# git checkout f27
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;File &lt;code&gt;fedora-atomic-host-base.json&lt;/code&gt; in the &lt;code&gt;fedora-atomic&lt;/code&gt; repo is the &lt;a href="https://rpm-ostree.readthedocs.io/en/latest/manual/treefile/"&gt;treefile&lt;/a&gt; containing details about the target system. It has a list of packages which will be composed into our new OSTree. Add or remove package names as required in your custom OSTree repo. In this example, I have added &lt;code&gt;elfutils&lt;/code&gt; in the &lt;code&gt;packages&lt;/code&gt; list.&lt;/p&gt;

&lt;p&gt;Also, feel free to give your own ref name if desired by editing the content of the &lt;code&gt;ref&lt;/code&gt; section. rpm-ostree will automatically replace &lt;code&gt;${basearch}&lt;/code&gt; by architecture name (x86_64, ppc64le or aarch64) on which you are composing your OSTree.
In this example, I have changed &lt;code&gt;ref&lt;/code&gt; to &lt;code&gt;fedora/27/${basearch}/atomic-host-custom&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s compose ostree using rpm-ostree:&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# rpm-ostree compose tree  --cachedir=/srv/cache  --repo=/srv/repo fedora-atomic-host-base.json
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;On successful compose, you will see this at the end:&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Committing: [=======================================================================================================================================] 100%
Metadata Total: 7915
Metadata Written: 3585
Content Total: 32682
Content Written: 25647
Content Bytes Written: 1083483773
fedora/27/x86_64/atomic-host-custom =&amp;gt; 93b1d9f8b929916762260bfd31e1b5b9568c0da83110df9425f41e4b44115fc4
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The last line contains the OSTree ref name followed by a commit number.&lt;/p&gt;

&lt;p&gt;To view available commits, run:&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# ostree log --repo=/srv/repo/ fedora/27/x86_64/atomic-host-custom
commit 93b1d9f8b929916762260bfd31e1b5b9568c0da83110df9425f41e4b44115fc4
Date:  2017-12-10 13:11:50 +0000
Version: 27
(no subject)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In the commit log,  the &lt;code&gt;Version&lt;/code&gt; value gets updated with additional commits made in ref fedora/27/x86_64/atomic-host-custom. Values are in incremental fashion, i.e. 27.1, 27.2, 27.3, and so on.&lt;/p&gt;

&lt;h3&gt;Updating Atomic Host system with custom OSTree&lt;/h3&gt;

&lt;p&gt;Now, if you have a host machine or virtual machine with Atomic Host already running, let&amp;rsquo;s try to update the system with the custom update repository we just created.&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ sudo ostree remote add fedora-atomic-custom http://YOUR_IP:8000/repo --no-gpg-verify
$ cat /etc/ostree/remotes.d/fedora-atomic-custom.conf
[remote "fedora-atomic-custom"]
url=http://YOUR_IP:8000/repo
gpg-verify=false
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here, YOUR_IP is the IP address of the system on which your &lt;code&gt;atomicrepo&lt;/code&gt; container is running. Make sure that the IP address is reachable from the target system where the update process will take place.&lt;/p&gt;

&lt;p&gt;Now, update the Atomic Host system with our locally hosted ostree repo using &lt;code&gt;rpm-ostree rebase&lt;/code&gt;.&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ sudo rpm-ostree rebase fedora-atomic-custom:fedora/27/x86_64/atomic-host-custom
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In our example, fedora-atomic-custom is the remote name which we previously added. Reboot your system to apply changes.&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ sudo systemctl reboot
$ sudo rpm-ostree status
State: idle
Deployments:
● fedora-atomic-custom:fedora/27/x86_64/atomic-host-custom
                   Version: 27 (2017-12-10 13:11:50)
                BaseCommit: 93b1d9f8b929916762260bfd31e1b5b9568c0da83110df9425f41e4b44115fc4
           LayeredPackages: libabigail

  fedora-atomic:fedora/27/x86_64/atomic-host
                   Version: 27.16 (2017-11-28 23:08:35)
                BaseCommit: 86727cdbc928b7f7dd0e32f62d3b973a8395d61e0ff751cfea7cc0bc5222142f
              GPGSignature: Valid signature by 860E19B0AFA800A1751881A6F55E7430F5282EE4
           LayeredPackages: libabigail
&lt;/code&gt;&lt;/pre&gt;

&lt;h4&gt;Rollback to previous tree&lt;/h4&gt;

&lt;p&gt;In case you didn&amp;rsquo;t like updating to your custom OSTree, no worries. It&amp;rsquo;s very easy to switch back to a previous commit using the Atomic rollback feature:&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ sudo rpm-ostree rollback
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Reboot your system and it will be back to what you had earlier.&lt;/p&gt;

&lt;h3&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;Now you know how easy it is to create your own custom OSTree repository and serve it as update to all Atomic Host systems you want to keep in sync. All you have to do is keep updating the treefile and re-run the &lt;code&gt;rpm-ostree compose&lt;/code&gt; process on the server side, then run &lt;code&gt;rpm-ostree upgrade&lt;/code&gt; on client side once you have rebased the client system to the right ref. If something goes wrong, use the &lt;code&gt;rpm-ostree rollback&lt;/code&gt; feature and it will take you to the previous working Atomic Host system.&lt;/p&gt;

&lt;p&gt;So, give it a try and let us know how it worked for you in the #atomic IRC channel.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Fedora 27 Atomic Released</title>
    <link rel="alternate" href="http://www.projectatomic.io/blog/2017/11/fedora-atomic-27-features/"/>
    <id>http://www.projectatomic.io/blog/2017/11/fedora-atomic-27-features/</id>
    <published>2017-11-14T16:00:00+00:00</published>
    <updated>2021-10-07T14:03:16+00:00</updated>
    <author>
      <name>Josh Berkus</name>
    </author>
    <content type="html">&lt;p&gt;&lt;a href="https://getfedora.org/en/atomic/download/"&gt;Fedora 27 Atomic Host&lt;/a&gt; is now available.  Highlights of this version include multi-architecture support, containerized Kubernetes, a single OverlayFS volume by default, and new OSTree layering capabilities.&lt;/p&gt;

&lt;p&gt;Over the next week or so, we will have additional posts on each of these features, giving technical details and use-cases.  But today, for the release, we&amp;rsquo;ll have quick summary of the major changes.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;h3&gt;Features&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Multi-Architecture Support&lt;/strong&gt;: Fedora 27 Atomic Host is available for &lt;a href="#"&gt;64-bit ARM&lt;/a&gt; and &lt;a href="#"&gt;Power8&lt;/a&gt; processor architectures as well as 64-bit Intel (i.e. AArch64, ppc64le and x86_64).  Not only are we distributing ISOs and cloud images for all three architectures, we will also be providing two-week OSTree updates for them as well.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Containerized Kubernetes&lt;/strong&gt;: As planned, the Kubernetes binaries have been removed from the base image for Atomic Host.  This change both shrinks the base image size, and allows users to install the container orchestration platform and version of their choice, whether it&amp;rsquo;s Kubernetes, OpenShift, or something else.  Look for a blog post tommorrow on how to migrate your Kubernetes install.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Atomic Workstation Updates&lt;/strong&gt;: For over a year, Fedora contributors have been experimenting with an RPM-OStree build of Fedora Workstation, with all of their applications running in containers or Flatpaks. This build, now called &lt;q&gt;Atomic Workstation&lt;/q&gt;, will be receiving regular updates starting with this release.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;One Big OverlayFS2 Volume&lt;/strong&gt;: New Atomic Host systems will now get a single filesystem volume by default, which will share binaries, system containers, and OCI/docker containers using OverlayFS2.  Users who need to partition container images and storage onto a separate volume can still do so using kickstart options and &lt;code&gt;container-storage-setup&lt;/code&gt; configuration.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;OSTree Package Layering Improvements&lt;/strong&gt;: RPM-OStree has added two capabilities supporting modifying individula systems: &lt;a href="/blog/2017/07/rpm-ostree-v2017.7-released/"&gt;remove and replace overrides&lt;/a&gt;, and &lt;a href="/blog/2017/06/rpm-ostree-v2017.6-released/"&gt;LiveFS layering&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;With the release of Fedora 27 Atomic Host, updates to the Fedora 26 Atomic Host will be strictly on a best-effort basis.  As such, we strongly encourage users to upgrade to the new release soon. Our upgrade guide begins with &lt;a href="/blog/2017/11/fedora-atomic-26-to-27-upgrade/"&gt;this post&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;Release Details&lt;/h3&gt;

&lt;p&gt;The OSTree update hash for Fedora 27 Atomic is:&lt;/p&gt;

&lt;p&gt;Version: 27.1&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Commit(x86_64): d428d3ad8ecf44e53d138042bad56a10308883a0c5d64b9c51eff27fdc9da82c&lt;/li&gt;
&lt;li&gt;Commit(aarch64): da1bd08012699a0aacaa11481d3ed617477858aab0f2ea7300168ce106202255&lt;/li&gt;
&lt;li&gt;Commit(ppc64le): 362888edfac04f8848072ae4fb8193b3da2f4fd226bef450326faff4be290abd&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We are releasing images from multiple architectures but please note
that x86_64 architecture is the only one that undergoes automated
testing at this time.&lt;/p&gt;

&lt;p&gt;Existing systems can be upgraded in place via &lt;code&gt;atomic host rebase&lt;/code&gt;, &lt;code&gt;atomic host upgrade&lt;/code&gt; or
&lt;code&gt;atomic host deploy&lt;/code&gt;.  However, see the Upgrading post in this blog for &lt;a href="/blog/2017/11/fedora-atomic-26-to-27-upgrade/"&gt;more information
about upgrading from Fedora 26&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Corresponding image media for new installations can be &lt;a href="https://getfedora.org/en/atomic/download/"&gt;downloaded from Fedora&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Respective signed CHECKSUM files can be found here:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://alt.fedoraproject.org/pub/alt/atomic/stable/Fedora-Atomic-27-20171110.1/Atomic/aarch64/iso/Fedora-Atomic-27-20171110.1-aarch64-CHECKSUM"&gt;Aarch64  ISO&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://alt.fedoraproject.org/pub/alt/atomic/stable/Fedora-Atomic-27-20171110.1/Atomic/ppc64le/iso/Fedora-Atomic-27-20171110.1-ppc64le-CHECKSUM"&gt;ppc64le ISO&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://alt.fedoraproject.org/pub/alt/atomic/stable/Fedora-Atomic-27-20171110.1/Atomic/x86_64/iso/Fedora-Atomic-27-20171110.1-x86_64-CHECKSUM"&gt;x86_64 ISO&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://alt.fedoraproject.org/pub/alt/atomic/stable/Fedora-Atomic-27-20171110.1/CloudImages/aarch64/images/Fedora-CloudImages-27-20171110.1-aarch64-CHECKSUM"&gt;Aarch64 CloudImage&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://alt.fedoraproject.org/pub/alt/atomic/stable/Fedora-Atomic-27-20171110.1/CloudImages/ppc64le/images/Fedora-CloudImages-27-20171110.1-ppc64le-CHECKSUM"&gt;ppc64le CloudImage&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://alt.fedoraproject.org/pub/alt/atomic/stable/Fedora-Atomic-27-20171110.1/CloudImages/x86_64/images/Fedora-CloudImages-27-20171110.1-x86_64-CHECKSUM"&gt;x86_64 CloudImage&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For direct download, the &lt;q&gt;latest&lt;/q&gt; targets are always available here:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://getfedora.org/atomic_iso_latest"&gt;ISO&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://getfedora.org/atomic_qcow2_latest"&gt;QCOW2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://getfedora.org/atomic_raw_latest"&gt;Raw&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://getfedora.org/atomic_vagrant_libvirt_latest"&gt;Libvirt&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://getfedora.org/atomic_vagrant_virtualbox_latest"&gt;VirtualBox&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Filename fetching URLs are available here:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://getfedora.org/atomic_iso_latest_filename"&gt;ISO&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://getfedora.org/atomic_qcow2_latest_filename"&gt;QCOW2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://getfedora.org/atomic_raw_latest_filename"&gt;Raw&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://getfedora.org/atomic_vagrant_libvirt_latest_filename"&gt;Libvirt&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://getfedora.org/atomic_vagrant_virtualbox_latest_filename"&gt;VirtualBox&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Alternatively, image artifacts can be found at the following links:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://alt.fedoraproject.org/pub/alt/atomic/stable/Fedora-Atomic-27-20171110.1/Atomic/aarch64/iso/Fedora-Atomic-ostree-aarch64-27-20171110.1.iso"&gt;Fedora-Atomic-ostree-aarch64-27-20171110.1.iso&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://alt.fedoraproject.org/pub/alt/atomic/stable/Fedora-Atomic-27-20171110.1/Atomic/ppc64le/iso/Fedora-Atomic-ostree-ppc64le-27-20171110.1.iso"&gt;Fedora-Atomic-ostree-ppc64le-27-20171110.1.iso&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://alt.fedoraproject.org/pub/alt/atomic/stable/Fedora-Atomic-27-20171110.1/Atomic/x86_64/iso/Fedora-Atomic-ostree-x86_64-27-20171110.1.iso"&gt;Fedora-Atomic-ostree-x86_64-27-20171110.1.iso&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://alt.fedoraproject.org/pub/alt/atomic/stable/Fedora-Atomic-27-20171110.1/CloudImages/aarch64/images/Fedora-Atomic-27-20171110.1.aarch64.qcow2"&gt;Fedora-Atomic-27-20171110.1.aarch64.qcow2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://alt.fedoraproject.org/pub/alt/atomic/stable/Fedora-Atomic-27-20171110.1/CloudImages/aarch64/images/Fedora-Atomic-27-20171110.1.aarch64.raw.xz"&gt;Fedora-Atomic-27-20171110.1.aarch64.raw.xz&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://alt.fedoraproject.org/pub/alt/atomic/stable/Fedora-Atomic-27-20171110.1/CloudImages/ppc64le/images/Fedora-Atomic-27-20171110.1.ppc64le.qcow2"&gt;Fedora-Atomic-27-20171110.1.ppc64le.qcow2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://alt.fedoraproject.org/pub/alt/atomic/stable/Fedora-Atomic-27-20171110.1/CloudImages/ppc64le/images/Fedora-Atomic-27-20171110.1.ppc64le.raw.xz"&gt;Fedora-Atomic-27-20171110.1.ppc64le.raw.xz&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://alt.fedoraproject.org/pub/alt/atomic/stable/Fedora-Atomic-27-20171110.1/CloudImages/x86_64/images/Fedora-Atomic-27-20171110.1.x86_64.qcow2"&gt;Fedora-Atomic-27-20171110.1.x86_64.qcow2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://alt.fedoraproject.org/pub/alt/atomic/stable/Fedora-Atomic-27-20171110.1/CloudImages/x86_64/images/Fedora-Atomic-27-20171110.1.x86_64.raw.xz"&gt;Fedora-Atomic-27-20171110.1.x86_64.raw.xz&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://alt.fedoraproject.org/pub/alt/atomic/stable/Fedora-Atomic-27-20171110.1/CloudImages/x86_64/images/Fedora-Atomic-Vagrant-27-20171110.1.x86_64.vagrant-libvirt.box"&gt;Fedora-Atomic-Vagrant-27-20171110.1.x86_64.vagrant-libvirt.box&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://alt.fedoraproject.org/pub/alt/atomic/stable/Fedora-Atomic-27-20171110.1/CloudImages/x86_64/images/Fedora-Atomic-Vagrant-27-20171110.1.x86_64.vagrant-virtualbox.box"&gt;Fedora-Atomic-Vagrant-27-20171110.1.x86_64.vagrant-virtualbox.box&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For more information about the latest targets, please reference the &lt;a href="https://fedoraproject.org/wiki/Atomic_WG#Fedora_Atomic_Image_Download_Links"&gt;Fedora
Atomic Wiki space&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Do note that it can take some of the mirrors up to 12 hours to &lt;q&gt;check-in&lt;/q&gt; at
their own discretion.&lt;/p&gt;
</content>
  </entry>
</feed>

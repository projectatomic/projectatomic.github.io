<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Project Atomic</title>
  <subtitle>Tag: Atomic Scan</subtitle>
  <id>http://www.projectatomic.io/blog/</id>
  <link href="http://www.projectatomic.io/blog/"/>
  <link href="http://www.projectatomic.io/blog/tag/atomic-scan.xml" rel="self"/>
  <updated>2019-11-21T00:00:00+00:00</updated>
  <author>
    <name>Project Atomic. Sponsored by Red Hat, Inc.</name>
  </author>
  <entry>
    <title>Cockpit 127 Released</title>
    <link rel="alternate" href="http://www.projectatomic.io/blog/2017/01/cockpit-127/"/>
    <id>http://www.projectatomic.io/blog/2017/01/cockpit-127/</id>
    <published>2017-01-10T16:00:00+00:00</published>
    <updated>2021-10-07T14:03:16+00:00</updated>
    <author>
      <name>Stef Walter</name>
    </author>
    <content type="html">&lt;p&gt;Cockpit is the modern Linux admin interface. We release regularly. Here
are the release notes from versions 126 and 127:&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;h3&gt;Show security scan information about container images&lt;/h3&gt;

&lt;p&gt;Lars did work to show security scan information about container images.
The displayed scans happen via the &lt;a href="https://developers.redhat.com/blog/2016/05/02/introducing-atomic-scan-container-vulnerability-detection/"&gt;atomic scan&lt;/a&gt;
tools and the data
comes from the &lt;a href="https://www.open-scap.org/"&gt;OpenSCAP&lt;/a&gt; system. Take a look at the video below.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=zANUkEmfaAk"&gt;Demo&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Changes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/cockpit-project/cockpit/pull/4952"&gt;https://github.com/cockpit-project/cockpit/pull/4952&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/cockpit-project/cockpit/pull/5259"&gt;https://github.com/cockpit-project/cockpit/pull/5259&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/cockpit-project/cockpit/pull/5686"&gt;https://github.com/cockpit-project/cockpit/pull/5686&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;Choose whether password is cached and reused on the login screen&lt;/h3&gt;

&lt;p&gt;The typical workflow for peforming privileged tasks on a Linux system is
to log in as a non-root user and then use sudo or Polkit to escalate
privileges.&lt;/p&gt;

&lt;p&gt;Stef did work to make Cockpit&amp;rsquo;s privilege escalation reflect this
properly. Cockpit now has an option on the login screen to
&lt;q&gt;Reuse my password for privileged tasks&lt;/q&gt;. Checking this option
automatically performs reuses the login password as necessary to
escalate privileges. If you leave this box unchecked then Cockpit will
behave exactly as a normal user login without special privileges.&lt;/p&gt;

&lt;p&gt;In the future we&amp;rsquo;ll have a way to enable this option once logged in, and
retype your password inside of the logged in session.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=TW6UsPbNkV4"&gt;Demo&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/cockpit-project/cockpit/pull/5522"&gt;Change&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;The remotectl command can now combine certificate and key files&lt;/h3&gt;

&lt;p&gt;Peter did work to make it easier to use TLS certificate and key files
with Cockpit for port 9090. Normally the server certificate(s) and key
need to be combined into a single file and placed into the
/etc/cockpit/ws-certs.d directory. The remotectl command that comes with
Cockpit can now be used to build such a combined file.&lt;/p&gt;

&lt;p&gt;Due to this, when Cockpit is deployed as an Openshift Pod it can use
certificates provided by Openshift.&lt;/p&gt;

&lt;p&gt;Docs: man remotectl&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/cockpit-project/cockpit/pull/5525"&gt;Change&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;Cockpit respects /etc/shells&lt;/h3&gt;

&lt;p&gt;Martin fixed Cockpit so it only allows the user to log in if the user
has a valid shell listed in /etc/shells. In addition bugs on Ubuntu and
Debian have been fixed where users were created without valid shells.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/cockpit-project/cockpit/pull/5665"&gt;Change&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;Allow renaming of active devices in networking interface&lt;/h3&gt;

&lt;p&gt;You can now rename network devices like bonds or bridges while they&amp;rsquo;re
active. The change will apply immediately and without any interruption
in service.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/cockpit-project/cockpit/pull/5570"&gt;Change&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;Rename cockpit-shell to cockpit-system&lt;/h3&gt;

&lt;p&gt;The cockpit-shell subpackage has been renamed to cockpit-system to
better reflect its focus: configuring and troubleshooting the local system.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/cockpit-project/cockpit/pull/5600"&gt;Change&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;Kerberos authentication now works even if gss-proxy is in use&lt;/h3&gt;

&lt;p&gt;Sometimes Kerberos (or GSSAPI) single-sign-on authentication requires
multiple round trips to the server. Cockpit now supports this properly,
and the end result is that SSO works even when fancy things like
GSS-Proxy are in use.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/cockpit-project/cockpit/pull/5495"&gt;Change&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;Get it&lt;/h3&gt;

&lt;p&gt;You can &lt;a href="http://cockpit-project.org/running.html"&gt;get Cockpit here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Cockpit 127 is &lt;a href="https://bodhi.fedoraproject.org/updates/cockpit-127-1.fc25"&gt;available in Fedora 25&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Or &lt;a href="https://github.com/cockpit-project/cockpit/releases/tag/127"&gt;download the tarball&lt;/a&gt;.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Using the Atomic CLI to Scan Virtual Machines</title>
    <link rel="alternate" href="http://www.projectatomic.io/blog/2016/05/using-the-atomic-cli-to-scan-vms/"/>
    <id>http://www.projectatomic.io/blog/2016/05/using-the-atomic-cli-to-scan-vms/</id>
    <published>2016-05-13T12:00:00+00:00</published>
    <updated>2021-10-07T14:03:16+00:00</updated>
    <author>
      <name>Brent Baude</name>
    </author>
    <content type="html">&lt;p&gt;Recently on the Red Hat Developers blog, I wrote about the re-architecture of the &lt;a href="http://developers.redhat.com/blog/2016/05/02/introducing-atomic-scan-container-vulnerability-detection/"&gt;atomic vulnerability scan feature&lt;/a&gt;.   The primary function of &lt;em&gt;&lt;a href="https://github.com/projectatomic/atomic"&gt;atomic&lt;/a&gt; scan&lt;/em&gt; is to detect vulnerabilities in your images and containers using a plug-in enabled architecture.&lt;/p&gt;

&lt;p&gt;Building upon that concept, we added an additional feature to &lt;em&gt;atomic scan&lt;/em&gt; where you can now pass a chroot to it for the purposes of scanning.  One immediate benefit from this change was that we can now use the same scanner for our images and containers to scan a virtual machine (VM) that has been mounted onto the host&amp;rsquo;s filesystem.&lt;/p&gt;

&lt;p&gt;In this blog, I will show you how to scan a live VM with &lt;em&gt;atomic scan&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;h3&gt;Check for a Running VM&lt;/h3&gt;

&lt;p&gt;The first step is to see what VMs are on your system.  In my case, I have two VMs running; one of which was created for this purpose based on a RHEL 7.2 stock install with no updates.&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;[bbaude@localhost ~]$ sudo virsh list
 Id    Name                           State
----------------------------------------------------
 4     rhel7-scan                     running
 5     centos                         running

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The VM I want to work with is called &lt;em&gt;rhel7-scan&lt;/em&gt;.&lt;/p&gt;

&lt;h3&gt;Check the Filesystems in the VM&lt;/h3&gt;

&lt;p&gt;To mount a live VM to our filesystem, I plan to use a couple of applications from the libguestfs package.  While we do know which VM (sometimes referred to as a virtual domain) we want to work with, mounting VMs requires some basic knowledge of the VM&amp;rsquo;s fileystems; specifically, we want to know more about the VM&amp;rsquo;s root filesystem.  We can use &lt;em&gt;virt-filesystems&lt;/em&gt; to probe the VM&amp;rsquo;s filesystems.&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;[bbaude@localhost ~]$ sudo virt-filesystems -d rhel7-scan
/dev/sda1
/dev/rhel/root
[bbaude@localhost ~]$
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We now know the device associated with the root filesystem is &lt;em&gt;/dev/rhel/root&lt;/em&gt;.  This is a required piece of information for mounting VMs.&lt;/p&gt;

&lt;h3&gt;Mount the VM&amp;rsquo;s Root Filesystem&lt;/h3&gt;

&lt;p&gt;The first step is to create a directory where the VM&amp;rsquo;s root filesystem will reside after mounting.  In this case, I am going to simply create a directory called &lt;em&gt;/tmp/rhel&lt;/em&gt;.&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;[bbaude@localhost ~]$ mkdir /tmp/rhel
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now, armed with the VM&amp;rsquo;s name (or domain) and the root filesystem&amp;rsquo;s device, we can use &lt;em&gt;guestmount&lt;/em&gt; to actually perform the mount.  Note here because the VM is live, I have choosen to mount the filesystem as read-only.  I also happen to know that the scanner does not need to write any files to the VM filesystem so read-only is appropriate.&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;[bbaude@localhost ~]$ sudo guestmount  -d rhel7-scan -m /dev/rhel/root --ro /tmp/rhel
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The VM&amp;rsquo;s root filesystem is now mounted and we can use &lt;em&gt;ls&lt;/em&gt; to take a peek at the chroot.&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;[bbaude@localhost ~]$ sudo ls -l /tmp/rhel
total 28
lrwxrwxrwx.  1 root root    7 May 11  2016 bin -&amp;gt; usr/bin
drwxr-xr-x.  2 root root    6 May 11  2016 boot
drwxr-xr-x.  2 root root    6 May 11  2016 dev
drwxr-xr-x. 77 root root 8192 May 11  2016 etc
drwxr-xr-x.  3 root root   18 May 11 13:48 home
lrwxrwxrwx.  1 root root    7 May 11  2016 lib -&amp;gt; usr/lib
lrwxrwxrwx.  1 root root    9 May 11  2016 lib64 -&amp;gt; usr/lib64
drwxr-xr-x.  2 root root    6 May 25  2015 media
drwxr-xr-x.  2 root root    6 May 25  2015 mnt
drwxr-xr-x.  2 root root    6 May 25  2015 opt
drwxr-xr-x.  2 root root    6 May 11  2016 proc
dr-xr-x---.  2 root root 4096 May 11 13:49 root
drwxr-xr-x.  2 root root    6 May 11  2016 run
lrwxrwxrwx.  1 root root    8 May 11  2016 sbin -&amp;gt; usr/sbin
drwxr-xr-x.  2 root root    6 May 25  2015 srv
drwxr-xr-x.  2 root root    6 May 11  2016 sys
drwxrwxrwt.  7 root root 4096 May 11  2016 tmp
drwxr-xr-x. 13 root root 4096 May 11  2016 usr
drwxr-xr-x. 19 root root 4096 May 11  2016 var
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Prepare to Scan the Mounted Filesystem&lt;/h3&gt;

&lt;p&gt;Before we jump into scanning the filesystem, you should verify what scanners (plug-ins) are installed for atomic.  As my previous blog has shown, you can simply use &lt;em&gt;atomic scan &amp;ndash;list&lt;/em&gt; to see what scanners are currently configured for you.&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;[bbaude@localhost ~]$ sudo atomic scan --list
Scanner: openscap *
  Image Name: openscap
     Scan type: cve *
     Description: Performs a CVE scan based on known CVE data

     Scan type: standards_compliance
     Description: Performs a standard scan


* denotes defaults
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Based on this output, there is only one scanner available.  It is called &lt;em&gt;openscap&lt;/em&gt; and has two different scans avilable: &lt;em&gt;cve&lt;/em&gt; and &lt;em&gt;standards_compliance&lt;/em&gt;.  The &lt;em&gt;cve&lt;/em&gt; scan is the noted as the default.  &lt;/p&gt;

&lt;p&gt;If you are not familiar with the &lt;em&gt;atomic scan&lt;/em&gt; function, you can simply learn more with the &lt;em&gt;&amp;ndash;help&lt;/em&gt; switch or read the man page.  The key item we need to know about is the &lt;em&gt;&amp;ndash;rootfs&lt;/em&gt; command line switch.  This switch requires a filesystem path as a value.&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;[bbaude@localhost ~]$ sudo atomic scan --help
usage: atomic scan [-h] [--scanner {openscap}] [--scan_type SCAN_TYPE]
                   [--list] [--verbose] [--rootfs [ROOTFS] | --all | --images
                   | --containers]
                   [scan_targets [scan_targets ...]]

positional arguments:
  scan_targets          container image

optional arguments:
  -h, --help            show this help message and exit
  --scanner {openscap}  define the intended scanner
  --scan_type SCAN_TYPE
                        define the intended scanner
  --list                List available scanners
  --verbose             Show more output from scanning container
  --rootfs [ROOTFS]     Rootfs path to scan
  --all                 scan all images (excluding intermediate layers) and
                        containers
  --images              scan all images (excluding intermediate layers)
  --containers          scan all containers

atomic scan &amp;lt;input&amp;gt; scans a container or image for CVEs
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Scan the Filesystem Using Atomic Scan&lt;/h3&gt;

&lt;p&gt;At this point, we have all the information we need to perform the scan.  It is now only a matter of executing the command properly.  The command syntax is simply &lt;em&gt;atomic scan &amp;ndash;rootfs &lt;path_to_rootfs&gt;&lt;/em&gt;.  You can also enable the &lt;em&gt;&amp;ndash;verbose&lt;/em&gt; command line switch to see more output, which is good for debug purposes.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;:  Because I already have the openscap image pulled locally, you will not see it being pulled.  Of course, if you do not have the image local, your output will vary slightly.&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;[bbaude@localhost ~]$ sudo atomic scan --rootfs /tmp/rhel
docker run -it --rm -v /etc/localtime:/etc/localtime -v /run/atomic/2016-05-11-13-54-05-804238:/scanin -v /var/lib/atomic/openscap/2016-05-11-13-54-05-804238:/scanout:rw,Z --security-opt label:disable openscap oscapd-evaluate scan --no-standard-compliance --targets chroots-in-dir:///scanin --output /scanout

/tmp/rhel (/tmp/rhel)

The following issues were found:

     RHSA-2016:1025: pcre security update (Important)
     Severity: Important
       RHSA URL: https://rhn.redhat.com/errata/RHSA-2016-1025.html
       RHSA ID: RHSA-2016:1025-00
       Associated CVEs:
           CVE ID: CVE-2015-2328
           CVE URL: https://access.redhat.com/security/cve/CVE-2015-2328
           CVE ID: CVE-2015-3217
           CVE URL: https://access.redhat.com/security/cve/CVE-2015-3217
           CVE ID: CVE-2015-5073
           CVE URL: https://access.redhat.com/security/cve/CVE-2015-5073
           CVE ID: CVE-2015-8385
           CVE URL: https://access.redhat.com/security/cve/CVE-2015-8385
           CVE ID: CVE-2015-8386
           CVE URL: https://access.redhat.com/security/cve/CVE-2015-8386
           CVE ID: CVE-2015-8388
           CVE URL: https://access.redhat.com/security/cve/CVE-2015-8388
           CVE ID: CVE-2015-8391
           CVE URL: https://access.redhat.com/security/cve/CVE-2015-8391
           CVE ID: CVE-2016-3191
           CVE URL: https://access.redhat.com/security/cve/CVE-2016-3191

     RHSA-2016:0722: openssl security update (Important)
     Severity: Important
       RHSA URL: https://rhn.redhat.com/errata/RHSA-2016-0722.html
       RHSA ID: RHSA-2016:0722-00
       Associated CVEs:
           CVE ID: CVE-2016-0799
           CVE URL: https://access.redhat.com/security/cve/CVE-2016-0799
           CVE ID: CVE-2016-2105
           CVE URL: https://access.redhat.com/security/cve/CVE-2016-2105
           CVE ID: CVE-2016-2106
           CVE URL: https://access.redhat.com/security/cve/CVE-2016-2106
           CVE ID: CVE-2016-2107
           CVE URL: https://access.redhat.com/security/cve/CVE-2016-2107
           CVE ID: CVE-2016-2108
           CVE URL: https://access.redhat.com/security/cve/CVE-2016-2108
           CVE ID: CVE-2016-2109
           CVE URL: https://access.redhat.com/security/cve/CVE-2016-2109
           CVE ID: CVE-2016-2842
           CVE URL: https://access.redhat.com/security/cve/CVE-2016-2842

     RHSA-2016:0685: nss, nspr, nss-softokn, and nss-util security, bug fix, and enhancement update (Moderate)
     Severity: Moderate
       RHSA URL: https://rhn.redhat.com/errata/RHSA-2016-0685.html
       RHSA ID: RHSA-2016:0685-00
       Associated CVEs:
           CVE ID: CVE-2016-1978
           CVE URL: https://access.redhat.com/security/cve/CVE-2016-1978
           CVE ID: CVE-2016-1979
           CVE URL: https://access.redhat.com/security/cve/CVE-2016-1979

...
Content removed due to length
...

Files associated with this scan are in /var/lib/atomic/openscap/2016-05-11-13-54-05-804238.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As you can see, there are least three vulnerabilities caught here.  The rest were clipped in the interest of space.&lt;/p&gt;

&lt;h3&gt;Unmount the VM&amp;rsquo;s Filesystem&lt;/h3&gt;

&lt;p&gt;Don&amp;rsquo;t forget to unmount the VM&amp;rsquo;s filesystem when your scan is complete.  In my case, I want to remediate the VM to shore up the vulnerabilties.&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;[bbaude@localhost ~]$ sudo guestunmount /tmp/rhel
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Remediate the Vulnerabilties and Rescan&lt;/h3&gt;

&lt;p&gt;As I said earlier, this VM we scanned was based on a stock RHEL7.2 install without any updates.  This was obviously done on purpose to demonstrate the scan first.  I then logged into the VM and updated the system entirely and will now remount the VM filesystem and rescan.&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;[bbaude@localhost ~]$ sudo guestmount  -d rhel7-scan -m /dev/rhel/root --ro /tmp/rhel
[bbaude@localhost ~]$ sudo atomic scan --rootfs /tmp/rhel
docker run -it --rm -v /etc/localtime:/etc/localtime -v /run/atomic/2016-05-12-10-55-44-763361:/scanin -v /var/lib/atomic/openscap/2016-05-12-10-55-44-763361:/scanout:rw,Z --security-opt label:disable openscap oscapd-evaluate scan --no-standard-compliance --targets chroots-in-dir:///scanin --output /scanout

/tmp/rhel (/tmp/rhel)

/tmp/rhel passed the scan

Files associated with this scan are in /var/lib/atomic/openscap/2016-05-12-10-55-44-763361.

[bbaude@localhost ~]$ sudo guestunmount /tmp/rhel
[bbaude@localhost ~]$  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The scan is clean and no vulnerabilities are found.&lt;/p&gt;

&lt;p&gt;Using the &lt;em&gt;atomic scan&lt;/em&gt; function with the openSCAP project is not only an easy way to find vulnerabilities in your RHEL based images and containers, but it can basically scan and chroot filesystem that is RHEL including read-only mounts of VM root filesystems.  It is a quick, singular way to perform the scan.&lt;/p&gt;
</content>
  </entry>
</feed>
